{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///../node_modules/gl-matrix/esm/mat2.js","webpack:///../node_modules/gl-matrix/esm/mat2d.js","webpack:///../node_modules/gl-matrix/esm/mat3.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../node_modules/gl-matrix/esm/quat.js","webpack:///../node_modules/gl-matrix/esm/quat2.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/gl-matrix/esm/index.js","webpack:///./src/SGNode.ts","webpack:///../common/WebGLUtils.ts","webpack:///../common/PolygonMesh.ts","webpack:///../common/Light.ts","webpack:///./src/ScenegraphsLightsTextures.ts","webpack:///./src/View.ts","webpack:///../common/Stack.ts","webpack:///./src/VertexPNT.ts","webpack:///../common/ShaderLocationsVault.ts","webpack:///./src/ScenegraphRenderer.ts","webpack:///../common/RenderableMesh.ts","webpack:///../common/TextureObject.ts","webpack:///./src/ScenegraphJSONImporter.ts","webpack:///./src/Scenegraph.ts","webpack:///./src/HitRecord.ts","webpack:///./src/GroupNode.ts","webpack:///../common/ObjImporter.ts","webpack:///./src/TransformNode.ts","webpack:///./src/LeafNode.ts","webpack:///../common/Material.ts","webpack:///./src/Ray.ts","webpack:///./src/Controller.ts","webpack:///./src/RTView.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","v","v0","v1","fromRotation","fromScaling","str","frob","hypot","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","scale","y","arguments","length","sqrt","mul","sub","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","forEach","stride","offset","count","fn","arg","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","view","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","len1","len2","graph","this","parent","lights","scenegraph","setName","push","modelview","light","Light","setAmbient","getAmbient","setDiffuse","getDiffuse","setSpecular","getSpecular","setSpotAngle","getSpotCutoff","getPosition","vec4","peek","setPosition","setDirection","getSpotDirection","setSpotDirection","vec3","addNode","transform","Error","createShader","gl","source","shaderType","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","create3DContext","canvas","attribs","names","ii","getContext","e","createErrorHTML","msg","textureURL","textureId","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","src","addEventListener","generateMipmap","context","WebGLRenderingContext","document","getElementsByTagName","innerHTML","GET_A_WEBGL_BROWSER","vShaderSource","fShaderSource","program","createProgram","vShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","Mesh","FaceType","PolygonMesh","vertexData","indices","faceType","Triangle","minBounds","maxBounds","vp","computeBoundingBox","hasData","positions","data","getData","pos","normals","norm","setData","result","setVertexData","newIndices","TriangleFan","TriangleStrip","setPrimitives","Lines","DecoratedMesh","mesh","CanonicalMesh","super","resizeAndCenter","getVertexAttributes","getVertexCount","minimum","maximum","vertex","longest","mat4","ambient","diffuse","specular","position","spotDirection","spotCutoff","dir","sDir","diff","spec","numFrames","lastTime","controller","window","onload","ev","querySelector","console","WebGLUtils","setupWebGL","alert","raytracerView","RTView","View","Controller","go","tick","Date","getTime","currentTime","animate","draw","requestAnimationFrame","onbeforeunload","freeMeshes","main","rayTraceView","time","Stack","clearColor","proj","glMatrix","viewport","getNumLights","shaderProgram","createShaderProgram","useProgram","shaderLocations","ShaderLocationsVault","shaderVarsToVertexAttribs","Map","renderer","ScenegraphRenderer","setRenderer","Promise","resolve","ScenegraphJSONImporter","importJSON","VertexPNTProducer","json","then","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","isEmpty","pop","cameraPos","colors","rayTrace","uniformMatrix4fv","getUniformLocation","fillCanvas","direction","ray","Ray","color","rayCast","blackColor","whiteColor","closest_intersection","dispose","features","tX","tY","tZ","texture","textureName","boxScaleX","boxScaleY","boxScaleZ","cylinderScaleX","cylinderScaleY","cylinderScaleZ","coneScaleX","coneScaleY","coneScaleZ","isLarge","createBox","createCylinder","createCone","createTurrets","createAeroplane","list","obj","VertexPNT","texcoord","attribName","normal","uniforms","getAllShaderVariables","numUniforms","ACTIVE_UNIFORMS","uniformInfo","getActiveUniform","location","addUniformLocation","numAttribs","ACTIVE_ATTRIBUTES","activeInfo","getActiveAttrib","getAttribLocation","addAttribLocation","varName","has","shaderVarsToAttribs","meshRenderers","textures","meshName","renderableMesh","RenderableMesh","initMeshForRendering","path","substring","indexOf","TextureObject","root","modelView","getLights","sendLightsToShader","ambientLocation","diffuseLocation","specularLocation","positionLocation","spotDirectionLocation","spotCutoffLocation","uniform3fv","uniform4fv","uniform1f","values","cleanup","material","transformation","loc","getShininess","normalMatrix","vbo","createBuffer","ibo","numIndices","offsets","vertexDataLengths","shaderVarsToAttributeNames","getFaceType","TRIANGLES","TRIANGLE_FAN","TRIANGLE_STRIP","LINES","LineStrip","LINE_STRIP","LineLoop","LINE_LOOP","vertexDataList","primitives","getIndices","indicesArray","Uint16Array","floatsPerVertex","shaderVar","size","vertexDataAsNumbers","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","deleteBuffer","shaderLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","drawElements","UNSIGNED_SHORT","id","createElement","drawImage","getImageData","trunc","inter1","inter2","inter3","one","lookup","two","three","four","handleNode","handleTransformNode","handleGroupNode","handleLeafNode","nodeName","TransformNode","op","convertToArray","translateBy","scaleBy","rotateAngle","rotateAxis","addChild","setTransform","handleLight","addLight","parseFloat","handleMaterial","Material","setEmission","setShininess","setAbsorption","setReflection","setTransparency","setRefractiveIndex","GroupNode","child","node","LeafNode","setMaterial","setTextureName","handleInstances","scaleAndCenter","producer","nameUrls","keys","ObjImporter","batchDownloadMesh","meshMap","addPolygonMesh","handleTextures","addTexture","contents","reject","jsonTree","JSON","parse","Scenegraph","scaleInstances","makeScenegraph","meshes","nodes","addMesh","setScenegraph","hitRecord","HitRecord","calculateHitInfo","intersection","intersectionPoint","materials","SGNode","children","getNode","answer","newc","newgroup","setParent","numLights","lgt","importMesh","IndexTriple","vIndex","tIndex","nIndex","vertexIndex","textureIndex","normalIndex","vertices","texcoords","indexData","meshIndices","lineno","unpacked","lines","split","line","trim","startsWith","tokens","num","shift","faceData","triangulate","vertIndex","parseInt","normalsPresent","texturePresent","hashValue","hash","actualIndex","produce","getMesh","downloadMesh","promise","fetch","response","text","nameAndUrl","promises","all","animationTransform","newchild","newtransform","setAnimationTransform","instanceOf","newclone","getMaterial","drawMesh","calculateHitInfoSphere","calculateHitInfoBox","rayPos","getStartPoint","rayDir","getDirection","v_x","v_y","v_z","s_x","s_y","s_z","currentShortestTime","t1","t2","setTime","setIntersectionPoint","txMin","txMax","tyMin","tyMax","tzMin","tzMax","emission","init","getEmission","getAbsorption","getReflection","getTransparency","getRefractiveIndex","shininess","absorption","reflection","transparency","refractive_index","startPoint","setFeatures","initScenegraph","initShaders","getPhongVShader","getPhongFShader","initRenderer","saveCanvas","link","href","toDataURL","download","click","h","Number","getAttribute","imageData","createImageData","putImageData"],"mappings":"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","file":"ScenegraphsLightsTextures.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b, c,\r\n *  d, tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {quat} a     Origin unit quaternion \r\n * @param  {quat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n * \r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q a normalized quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { mat4, vec4, vec3 } from \"gl-matrix\"\r\nimport { Scenegraph } from \"Scenegraph\"\r\nimport { Stack } from \"%COMMON/Stack\";\r\nimport { ScenegraphRenderer } from \"ScenegraphRenderer\";\r\nimport { Material } from \"%COMMON/Material\";\r\nimport { IVertexData } from \"%COMMON/IVertexData\";\r\nimport { Light } from \"%COMMON/Light\";\r\nimport { Ray } from \"Ray\";\r\nimport { HitRecord } from \"HitRecord\";\r\n/**\r\n * This class represents a basic node of a scene graph.\r\n */\r\nexport abstract class SGNode {\r\n    /**\r\n      * The name given to this node\r\n    */\r\n    protected name: string;\r\n    /**\r\n     * The parent of this node. Each node except the root has a parent. The root's parent is null\r\n     */\r\n    protected parent: SGNode;\r\n    /**\r\n     * A reference to the {@link sgraph.IScenegraph} object that this is part of\r\n     */\r\n    protected scenegraph: Scenegraph<IVertexData>;\r\n\r\n    protected lights: Light[];\r\n\r\n    public constructor(graph: Scenegraph<IVertexData>, name: string) {\r\n        this.parent = null;\r\n        this.lights = [];\r\n        this.scenegraph = graph;\r\n        this.setName(name);\r\n    }\r\n\r\n    public addLight(l: Light): void {\r\n        this.lights.push(l);\r\n    }\r\n\r\n    public getNumLights(): number {\r\n        return this.lights.length;\r\n    }\r\n    public getLights(modelview: Stack<mat4>): Light[] {\r\n        let lights: Light[] = [];\r\n\r\n        //first add all lights in this node\r\n        this.lights.forEach((l: Light) => {\r\n            let light: Light = new Light();\r\n            light.setAmbient(l.getAmbient());\r\n            light.setDiffuse(l.getDiffuse());\r\n            light.setSpecular(l.getSpecular());\r\n            light.setSpotAngle(l.getSpotCutoff());\r\n            //transform position and spot direction\r\n            let v: vec4 = l.getPosition();\r\n            vec4.transformMat4(v, v, modelview.peek());\r\n            if (v[3] != 0) {\r\n                light.setPosition([v[0], v[1], v[2]]);\r\n            }\r\n            else {\r\n                light.setDirection([v[0], v[1], v[2]]);\r\n            }\r\n            v = l.getSpotDirection();\r\n            vec4.transformMat4(v, v, modelview.peek());\r\n            light.setSpotDirection(vec3.fromValues(v[0], v[1], v[2]));\r\n            lights.push(light);\r\n        });\r\n        return lights;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * By default, this method checks only itself. Nodes that have children should override this\r\n     * method and navigate to children to find the one with the correct name\r\n     * @param name name of node to be searched\r\n     * @return the node whose name this is, null otherwise\r\n     */\r\n    public getNode(name: string): SGNode {\r\n        if (this.name == name) {\r\n            return this;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent of this node\r\n     * @param parent the node that is to be the parent of this node\r\n     */\r\n\r\n    public setParent(parent: SGNode): void {\r\n        this.parent = parent;\r\n    }\r\n\r\n    /**\r\n     * Sets the scene graph object whose part this node is and then adds itself\r\n     * to the scenegraph (in case the scene graph ever needs to directly access this node)\r\n     * @param graph a reference to the scenegraph object of which this tree is a part\r\n     */\r\n    public setScenegraph(graph: Scenegraph<IVertexData>): void {\r\n        this.scenegraph = graph;\r\n        graph.addNode(this.name, this);\r\n    }\r\n\r\n    /**\r\n     * Sets the name of this node\r\n     * @param name the name of this node\r\n     */\r\n    public setName(name: string): void {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of this node\r\n     * @return the name of this node\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public abstract draw(context: ScenegraphRenderer, modelView: Stack<mat4>): void;\r\n    public abstract clone(): SGNode;\r\n    public setTransform(transform: mat4): void {\r\n        throw new Error(\"Not supported\");\r\n    }\r\n    public setAnimationTransform(transform: mat4): void {\r\n        throw new Error(\"Not supported\");\r\n    };\r\n\r\n    public setMaterial(mat: Material): void {\r\n        throw new Error(\"Not supported\");\r\n    }\r\n\r\n    public getMaterial(): Material {\r\n        throw new Error(\"Not supported\");\r\n    }\r\n\r\n    public abstract calculateHitInfo(ray: Ray, modelview : Stack<mat4>, hitRecord : HitRecord) : void;\r\n}","/**\r\n * Utilities useful to set up WebGL context. This code has been heavily borrowed from the code that accompanies \"WebGL Programming Guide: Interactive 3D Graphics Programming with WebGL\" by Matsuda and Lea\r\n */\r\n\r\n\r\n/**\r\n * This function imports in an image using HTML's Image class, so that it can be loaded and used as an WebGL texture\r\n * @param gl the rendering context used to create the texture\r\n * @param textureURL the URL of the image\r\n * @return the texture ID of the resulting texture that can be used for texture mapping\r\n */\r\n\r\nexport function loadTexture(gl: WebGLRenderingContext, textureURL: string): WebGLTexture {\r\n  let textureId: WebGLTexture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, textureId);\r\n\r\n  // Because images have to be download over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n    width, height, border, srcFormat, srcType,\r\n    pixel);\r\n\r\n  const image = new Image();\r\n  image.src = textureURL;\r\n  image.addEventListener(\"load\", () => {\r\n    gl.bindTexture(gl.TEXTURE_2D, textureId);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n      srcFormat, srcType, image);\r\n    gl.generateMipmap(gl.TEXTURE_2D);\r\n  });\r\n\r\n\r\n  return textureId;\r\n}\r\n\r\nfunction isPowerOf2(value: number): boolean {\r\n  return (value & (value - 1)) == 0;\r\n}\r\n\r\n/**\r\n * Creates a webgl context. If creation fails it will\r\n * change the contents of the container of the <canvas>\r\n * tag to an error message with the correct links for WebGL.\r\n * @param {Element} canvas. The canvas element to create a\r\n *     context from.\r\n * @return {WebGLRenderingContext} The created context.\r\n */\r\nexport function setupWebGL(canvas: HTMLCanvasElement, attribs: WebGLContextAttributes): WebGLRenderingContext {\r\n\r\n  var context: WebGLRenderingContext = create3DContext(canvas, attribs);\r\n  if (!context || (!(context instanceof WebGLRenderingContext))) {\r\n    var container = document.getElementsByTagName(\"body\")[0];\r\n    container.innerHTML = createErrorHTML(GET_A_WEBGL_BROWSER);\r\n  }\r\n\r\n  return context;\r\n\r\n}\r\n\r\n/**\r\n   * A helper function to create the shader program, given the shader sources.\r\n   * @param gl the WebGLRenderingContext that can be used to call WebGL functions\r\n   * @param vShaderSource the source of the vertex shader, as a string\r\n   * @param fShaderSource the source of the fragment shader, as a string\r\n   * @return the shader program object, as a WebGLProgram object\r\n   */\r\nexport function createShaderProgram(gl: WebGLRenderingContext, vShaderSource: string, fShaderSource: string): WebGLProgram {\r\n  //create a new shader program\r\n  let program: WebGLProgram = gl.createProgram();\r\n\r\n  //create a shader object for the vertex shader\r\n  let vShader: WebGLShader = createShader(gl, vShaderSource, gl.VERTEX_SHADER);\r\n\r\n  //create a shader object for the fragment shader\r\n  let fShader: WebGLShader = createShader(gl, fShaderSource, gl.FRAGMENT_SHADER);\r\n\r\n  //attach the vertex shader to the program\r\n  gl.attachShader(program, vShader);\r\n  //attach the fragment shader to the program\r\n  gl.attachShader(program, fShader);\r\n\r\n  //now \"link\" the program. This links together the two shaders into one program\r\n  gl.linkProgram(program);\r\n  //verify that the shader program was successfully linked\r\n  let success: number = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n  if (!success) {\r\n    //something went wrong when linking the program; get the error \r\n    throw \"Could not link shader: \" + gl.getProgramInfoLog(program);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\n/**\r\n * A helper function to create a new shader program, given its source.\r\n * @param gl the WebGLRenderingContext that can be used to call WebGL functions\r\n * @param source the source of the shader, as a string\r\n * @param shaderType the type of the shader (ehter VERTEX_SHADER or FRAGMENT_SHADER)\r\n * @return the shader object, as a WebGLShader\r\n */\r\nexport function createShader(gl: WebGLRenderingContext, source: string, shaderType: number): WebGLShader {\r\n  let shader: WebGLShader = gl.createShader(shaderType);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  // Check if it compiled\r\n  let success: number = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n  if (!success) {\r\n    // Something went wrong during compilation; get the error\r\n    throw \"could not compile my shader:\" + source + \":\" + gl.getShaderInfoLog(shader);\r\n  }\r\n  return shader;\r\n}\r\n\r\n\r\n/**\r\n * Creates a webgl context.\r\n * @param {!Canvas} canvas The canvas tag to get context\r\n *     from. If one is not passed in one will be created.\r\n * @return {WebGLRenderingContext} The created context.\r\n */\r\nexport function create3DContext(canvas: HTMLCanvasElement, attribs: WebGLContextAttributes): WebGLRenderingContext {\r\n  var names = [\"webgl\", \"experimental-webgl\"];\r\n  for (var ii = 0; ii < names.length; ++ii) {\r\n    try {\r\n      return <WebGLRenderingContext>canvas.getContext(\"webgl\", attribs);\r\n    } catch (e) { }\r\n\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Creates the HTML for a failure message\r\n * @param {string} canvasContainerId id of container of th\r\n *        canvas.\r\n * @return {string} The html.\r\n */\r\nexport function createErrorHTML(msg: string): string {\r\n  return '' +\r\n    '<div style=\"margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;\">' + msg + '</div>';\r\n}\r\n\r\n/**\r\n * Message for getting a webgl browser\r\n * @type {string}\r\n */\r\nlet GET_A_WEBGL_BROWSER: string = '' +\r\n  'This page requires a browser that supports WebGL.<br/>' +\r\n  '<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>';\r\n\r\n/**\r\n * Mesasge for need better hardware\r\n * @type {string}\r\n */\r\nlet OTHER_PROBLEM: string = '' +\r\n  \"It doesn't appear your computer can support WebGL.<br/>\" +\r\n  '<a href=\"http://get.webgl.org\">Click here for more information.</a>';\r\n\r\n","\r\nimport { IVertexData } from \"./IVertexData\";\r\nimport { vec4, vec3, mat4 } from \"gl-matrix\"\r\n\r\nexport namespace Mesh {\r\n    export enum FaceType { Triangle, TriangleFan, TriangleStrip, Lines, LineStrip, LineLoop };\r\n\r\n    /**\r\n     * This class represents a triangle mesh. It stores vertex positions, normals and texture \r\n     * coordinates. It also stores the indices of the vertex that make triangles, three at a time.\r\n     */\r\n\r\n    export class PolygonMesh<VertexType extends IVertexData> {\r\n        protected vertexData: VertexType[];\r\n        protected indices: number[];\r\n        protected faceType: FaceType; //triangle, triangle fan, etc.\r\n\r\n\r\n        protected minBounds: vec4;\r\n        protected maxBounds: vec4; //bounding box\r\n\r\n        public constructor() {\r\n            this.vertexData = [];\r\n            this.indices = [];\r\n            this.faceType = FaceType.Triangle;\r\n            this.minBounds = vec4.create();\r\n            this.maxBounds = vec4.create();\r\n        }\r\n\r\n\r\n\r\n        public getFaceType(): number {\r\n            return this.faceType;\r\n        }\r\n\r\n        public getNumIndices(): number {\r\n            return this.indices.length;\r\n        }\r\n\r\n        public getVertexCount(): number {\r\n            return this.vertexData.length;\r\n        }\r\n\r\n\r\n        public getMinimumBounds(): vec4 {\r\n            return vec4.clone(this.minBounds);\r\n        }\r\n\r\n        public getMaximumBounds(): vec4 {\r\n            return vec4.clone(this.maxBounds);\r\n        }\r\n\r\n\r\n        public getVertexAttributes(): VertexType[] {\r\n            return this.vertexData;\r\n        }\r\n\r\n        public getIndices(): number[] {\r\n            return this.indices;\r\n        }\r\n\r\n\r\n        public setVertexData(vp: VertexType[]): void {\r\n            this.vertexData = vp;\r\n            this.computeBoundingBox();\r\n        }\r\n\r\n\r\n        public setPrimitives(t: number[], faceType: FaceType): void {\r\n            this.indices = t;\r\n            this.faceType = faceType;\r\n        }\r\n\r\n        /**\r\n         * Compute the bounding box of this polygon mesh, if there is position data\r\n         */\r\n\r\n        protected computeBoundingBox(): void {\r\n            let j: number;\r\n\r\n            if (this.vertexData.length <= 0)\r\n                return;\r\n\r\n            if (!this.vertexData[0].hasData(\"position\")) {\r\n                return;\r\n            }\r\n\r\n            let positions: vec4[] = [];\r\n\r\n            for (let v of this.vertexData) {\r\n                let data: number[] = v.getData(\"position\");\r\n                let pos: vec4 = vec4.fromValues(0, 0, 0, 1);\r\n                for (let i = 0; i < data.length; i++) {\r\n                    pos[i] = data[i];\r\n                }\r\n                positions.push(pos);\r\n            }\r\n\r\n            this.minBounds = vec4.clone(positions[0]);\r\n            this.maxBounds = vec4.clone(positions[0]);\r\n\r\n            for (j = 0; j < positions.length; j++) {\r\n                let p: vec4 = positions[j];\r\n\r\n                for (let i = 0; i < 3; i++) {\r\n                    if (p[i] < this.minBounds[i]) {\r\n                        this.minBounds[i] = p[i];\r\n                    }\r\n\r\n                    if (p[i] > this.maxBounds[i]) {\r\n                        this.maxBounds[i] = p[i];\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Compute vertex normals in this polygon mesh using Newell's method, if\r\n         * position data exists\r\n         */\r\n\r\n        public computeNormals(): void {\r\n            let i, j, k: number;\r\n\r\n            if (this.vertexData.length <= 0)\r\n                return;\r\n\r\n            if (!this.vertexData[0].hasData(\"position\")) {\r\n                return;\r\n            }\r\n\r\n            if (!this.vertexData[0].hasData(\"normal\"))\r\n                return;\r\n\r\n            let positions: vec4[] = [];\r\n\r\n            this.vertexData.forEach(v => {\r\n                let data: number[] = v.getData(\"position\");\r\n                let pos: vec4 = vec4.fromValues(0, 0, 0, 1);\r\n                for (let i = 0; i < data.length; i++) {\r\n                    pos[i] = data[i];\r\n                }\r\n                positions.push(pos);\r\n            });\r\n\r\n            let normals: vec4[] = [];\r\n\r\n            for (let i = 0; i < positions.length; i++) {\r\n                normals.push(vec4.fromValues(0, 0, 0, 0));\r\n            }\r\n\r\n            for (let i = 0; i < this.indices.length; i += 3) {\r\n                let norm: vec3 = vec3.fromValues(0, 0, 0);\r\n\r\n                //compute the normal of this triangle\r\n                let v: number[] = [0, 0, 0];\r\n\r\n                for (let k = 0; k < 3; k++) {\r\n                    v[k] = this.indices[i + k];\r\n                }\r\n\r\n                //the newell's method to calculate normal\r\n\r\n                for (let k = 0; k < 3; k++) {\r\n                    for (let l = 0; l < 3; l++) {\r\n                        norm[l] +=\r\n                            (positions[v[k]][(l + 1) % 3] - positions[v[(k + 1) % 3]][(l + 1) % 3])\r\n                            * (positions[v[k]][(l + 2) % 3] + positions[v[(k + 1) % 3]][(l + 2) % 3]);\r\n                    }\r\n                }\r\n                vec3.normalize(norm, norm);\r\n\r\n\r\n                for (k = 0; k < 3; k++) {\r\n                    normals[v[k]] = vec4.add(normals[v[k]], normals[v[k]], vec4.fromValues(norm[0], norm[1], norm[2], 0));\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < normals.length; i++) {\r\n                let n: vec3 = vec3.fromValues(normals[i][0], normals[i][1], normals[i][2]);\r\n                vec3.normalize(n, n);\r\n                normals[i] = vec4.fromValues(n[0], n[1], n[2], 0);\r\n            }\r\n            for (i = 0; i < this.vertexData.length; i++) {\r\n                this.vertexData[i].setData(\"normal\", [normals[i][0], normals[i][1], normals[i][2]]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Convert this mesh to wireframe\r\n         */\r\n        public convertToWireframe(): PolygonMesh<VertexType> {\r\n            let result: PolygonMesh<VertexType> = new PolygonMesh<VertexType>();\r\n            let i: number;\r\n            result.setVertexData(this.vertexData);\r\n            let newIndices: number[] = [];\r\n\r\n            switch (this.faceType) {\r\n                case FaceType.Triangle:\r\n                    for (i = 0; i < this.indices.length; i += 3) {\r\n                        newIndices.push(this.indices[i]);\r\n                        newIndices.push(this.indices[i + 1]);\r\n\r\n                        newIndices.push(this.indices[i + 1]);\r\n                        newIndices.push(this.indices[i + 2]);\r\n\r\n                        newIndices.push(this.indices[i + 2]);\r\n                        newIndices.push(this.indices[i]);\r\n                    }\r\n                    break;\r\n                case FaceType.TriangleFan:\r\n                    for (i = 1; i < this.indices.length - 1; i += 1) {\r\n                        newIndices.push(this.indices[0]);\r\n                        newIndices.push(this.indices[i]);\r\n\r\n                        newIndices.push(this.indices[i]);\r\n                        newIndices.push(this.indices[i + 1]);\r\n\r\n                        newIndices.push(this.indices[0]);\r\n                        newIndices.push(this.indices[i + 1]);\r\n                    }\r\n                    break;\r\n                case FaceType.TriangleStrip:\r\n                    for (i = 0; i < this.indices.length - 2; i++) {\r\n                        newIndices.push(this.indices[i]);\r\n                        newIndices.push(this.indices[i + 1]);\r\n\r\n                        newIndices.push(this.indices[i + 1]);\r\n                        newIndices.push(this.indices[i + 2]);\r\n\r\n                        newIndices.push(this.indices[i + 2]);\r\n                        newIndices.push(this.indices[i]);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            result.setPrimitives(newIndices, FaceType.Lines);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * These classes are used in conjunction with the webgl-obj-loader package, imported above. These classes add extra functionality to the mesh from that package\r\n     */\r\n\r\n    /**\r\n     * This class represents a decorator for meshes. Classes that extend this one can add additional functionality to meshes\r\n     */\r\n    export class DecoratedMesh<VertexType extends IVertexData> {\r\n        protected mesh: Mesh.PolygonMesh<VertexType>;\r\n\r\n        constructor(m: Mesh.PolygonMesh<VertexType>) {\r\n            this.mesh = m;\r\n        }\r\n\r\n        public getMesh(): Mesh.PolygonMesh<VertexType> {\r\n            return this.mesh;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This decorater class resizes a mesh so that it occupies a cube of side 1 centered at the origin. \r\n     * This is useful because the scales and positions of different meshes loaded from OBJ files are not standardized, so transforming them is tricky. This class will make them of a \"canonical\" size.\r\n     */\r\n\r\n    export class CanonicalMesh<VertexType extends IVertexData> extends DecoratedMesh<VertexType> {\r\n        constructor(m: Mesh.PolygonMesh<VertexType>) {\r\n            super(m);\r\n            this.resizeAndCenter();\r\n        }\r\n\r\n        private resizeAndCenter(): void {\r\n            let vertexData: VertexType[] = this.mesh.getVertexAttributes();\r\n            if (this.mesh.getVertexCount() < 3) {\r\n                return;\r\n            }\r\n\r\n            //find the center and dimensions of the mesh\r\n            let center: vec3 = vec3.fromValues(0, 0, 0);\r\n            let minimum: vec3 = vec3.fromValues(vertexData[0].getData(\"position\")[0], vertexData[0].getData(\"position\")[1], vertexData[0].getData(\"position\")[2]);\r\n            let maximum: vec3 = vec3.fromValues(minimum[0], minimum[1], minimum[2]);\r\n            let i, j: number;\r\n            let dimension: number = vertexData[0].getData(\"position\").length;\r\n\r\n            vertexData.forEach(vertex => {\r\n                let data: number[] = vertex.getData(\"position\");\r\n                for (i = 0; i < data.length; i++) {\r\n                    if (data[i] < minimum[i]) {\r\n                        minimum[i] = data[i];\r\n                    }\r\n                    if (data[i] > maximum[i]) {\r\n                        maximum[i] = data[i];\r\n                    }\r\n                }\r\n            });\r\n            vec3.add(center, minimum, maximum);\r\n            vec3.scale(center, center, 0.5);\r\n            //move to the center, and scale to bring it within a box of [-1,1] in all three dimensions\r\n            let longest: number = Math.max(maximum[0] - minimum[0], maximum[1] - minimum[1], maximum[2] - minimum[2]);\r\n            let transform: mat4 = mat4.create();\r\n            mat4.scale(transform, transform, vec3.fromValues(1 / longest, 1 / longest, 1 / longest));\r\n            mat4.translate(transform, transform, vec3.negate(center, center));\r\n            for (i = 0; i < vertexData.length; i++) {\r\n                let data: number[] = vertexData[i].getData(\"position\");\r\n                let p: vec4 = vec4.fromValues(data[0], data[1], data[2], 1);\r\n                vec4.transformMat4(p, p, transform);\r\n                vertexData[i].setData(\"position\", [p[0], p[1], p[2], p[3]]);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { vec3, vec4 } from \"gl-matrix\"\r\n\r\n/**\r\n * This class represents a single light source. The light source has various\r\n * properties: position (location or direction), colors (ambient, diffuse,\r\n * specular) direction in which it is pointing (if a spotlight), angle of the\r\n * cone (if a spotlight)\r\n */\r\nexport class Light {\r\n    private ambient: vec3;\r\n    private diffuse: vec3;\r\n    private specular: vec3;\r\n    private position: vec4;\r\n    private spotDirection: vec4;\r\n    private spotCutoff: number;\r\n\r\n    constructor() {\r\n        this.ambient = vec3.fromValues(0, 0, 0);\r\n        this.diffuse = vec3.fromValues(0, 0, 0);\r\n        this.specular = vec3.fromValues(0, 0, 0);\r\n\r\n        this.position = vec4.fromValues(0, 0, 0, 1);\r\n        this.spotDirection = vec4.fromValues(0, 0, 0, 0);\r\n        this.spotCutoff = 0.0;\r\n    }\r\n\r\n    public setAmbient(ambient: vec3 | number[]): void {\r\n        this.ambient = vec3.fromValues(ambient[0], ambient[1], ambient[2]);\r\n    }\r\n\r\n\r\n    public setDirection(dir: vec3 | number[]): void {\r\n        this.position = vec4.fromValues(dir[0], dir[1], dir[2], 0.0);\r\n    }\r\n\r\n    public setSpotDirection(sDir: vec3 | number[]) {\r\n        this.spotDirection = vec4.fromValues(sDir[0], sDir[1], sDir[2], 0);\r\n    }\r\n\r\n\r\n    public setDiffuse(diff: vec3 | number[]): void {\r\n        this.diffuse = vec3.fromValues(diff[0], diff[1], diff[2]);\r\n    }\r\n\r\n    public setSpecular(spec: vec3 | number[]): void {\r\n        this.specular = vec3.fromValues(spec[0], spec[1], spec[2]);\r\n    }\r\n\r\n    public setSpotAngle(angle: number) {\r\n        this.spotCutoff = angle;\r\n    }\r\n\r\n    public setPosition(pos: vec3 | number[]): void {\r\n        this.position = vec4.fromValues(pos[0], pos[1], pos[2], 1);\r\n    }\r\n\r\n    public getAmbient(): vec3 {\r\n        return vec3.fromValues(this.ambient[0], this.ambient[1], this.ambient[2]);\r\n    }\r\n\r\n    public getDiffuse(): vec3 {\r\n        return vec3.fromValues(this.diffuse[0], this.diffuse[1], this.diffuse[2]);\r\n    }\r\n\r\n    public getSpecular(): vec3 {\r\n        return vec3.fromValues(this.specular[0], this.specular[1], this.specular[2]);\r\n    }\r\n\r\n    public getPosition(): vec4 {\r\n        return vec4.fromValues(this.position[0], this.position[1], this.position[2], this.position[3]);\r\n    }\r\n\r\n    public getSpotDirection(): vec4 {\r\n        return vec4.fromValues(this.spotDirection[0], this.spotDirection[1], this.spotDirection[2], this.spotDirection[3]);\r\n    }\r\n\r\n    public getSpotCutoff(): number {\r\n        return this.spotCutoff;\r\n    }\r\n}\r\n\r\n","import { View } from \"./View\"\r\nimport * as WebGLUtils from \"%COMMON/WebGLUtils\"\r\nimport { Controller } from \"./Controller\";\r\nimport { RTView } from \"./RTView\";\r\n\r\nvar numFrames: number = 0;\r\nvar lastTime: number = -1;\r\n\r\n/**\r\n * This is the main function of our web application. This function is called at the end of this file. In the HTML file, this script is loaded in the head so that this function is run.\r\n */\r\nfunction main(): void {\r\n    let gl: WebGLRenderingContext;\r\n    let view: View;\r\n    let controller: Controller;\r\n\r\n    window.onload = ev => {\r\n\r\n        //retrieve <canvas> element\r\n        var canvas: HTMLCanvasElement = <HTMLCanvasElement>document.querySelector(\"#glCanvas\");\r\n        if (!canvas) {\r\n            console.log(\"Failed to retrieve the <canvas> element\");\r\n            return;\r\n        }\r\n\r\n        //get the rendering context for webgl\r\n        gl = WebGLUtils.setupWebGL(canvas, { 'antialias': false, 'alpha': false, 'depth': true, 'stencil': false });\r\n\r\n        // Only continue if WebGL is available and working\r\n        if (gl == null) {\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return;\r\n        }\r\n        console.log(\"Window loaded\");\r\n        //set up the ray tracer view\r\n        let raytracerView: RTView = new RTView();\r\n        view = new View(gl, raytracerView);\r\n        \r\n        \r\n        \r\n\r\n        controller = new Controller(view);\r\n        controller.go();\r\n\r\n       \r\n\r\n        var tick = function () {\r\n            if (lastTime == -1) {\r\n                lastTime = new Date().getTime();\r\n            }\r\n            numFrames = numFrames + 1;\r\n            if (numFrames >= 100) {\r\n                let currentTime: number = new Date().getTime();\r\n                let frameRate: number = 1000 * numFrames / (currentTime - lastTime);\r\n                lastTime = currentTime;\r\n                //document.getElementById('frameratedisplay').innerHTML = \"Frame rate: \" + frameRate.toFixed(1);\r\n                numFrames = 0;\r\n            }\r\n            view.animate();\r\n            view.draw();\r\n\r\n            //this line sets up the animation\r\n            requestAnimationFrame(tick);\r\n        };\r\n\r\n        //call tick the first time\r\n        tick();\r\n    };\r\n\r\n    window.onbeforeunload = ev => view.freeMeshes();\r\n}\r\n\r\nmain();","import { vec4, mat4, vec3, glMatrix } from \"gl-matrix\";\r\nimport * as WebGLUtils from \"%COMMON/WebGLUtils\";\r\nimport { Features } from \"./Controller\";\r\nimport { Stack } from \"%COMMON/Stack\"\r\nimport { Scenegraph } from \"./Scenegraph\";\r\nimport { VertexPNT, VertexPNTProducer } from \"./VertexPNT\";\r\nimport { ShaderLocationsVault } from \"%COMMON/ShaderLocationsVault\";\r\nimport { Light } from \"%COMMON/Light\"\r\nimport { ScenegraphRenderer } from \"./ScenegraphRenderer\";\r\nimport { ScenegraphJSONImporter } from \"./ScenegraphJSONImporter\"\r\nimport {Ray} from \"./Ray\"\r\nimport { HitRecord } from \"HitRecord\";\r\nimport { RTView } from \"./RTView\";\r\n\r\n\r\n\r\n/**\r\n * This class encapsulates the \"view\", where all of our WebGL code resides. This class, for now, also stores all the relevant data that is used to draw. This can be replaced with a more formal Model-View-Controller architecture with a bigger application.\r\n */\r\n\r\n\r\nexport class View {\r\n  //the webgl rendering context. All WebGL functions will be called on this object\r\n  private gl: WebGLRenderingContext;\r\n  //an object that represents a WebGL shader\r\n  private shaderProgram: WebGLProgram;\r\n\r\n  //a projection matrix, that encapsulates how what we draw corresponds to what is seen\r\n  private proj: mat4;\r\n\r\n  //a modelview matrix, that encapsulates all the transformations applied to our object\r\n  private modelview: Stack<mat4>;\r\n\r\n  private scenegraph: Scenegraph<VertexPNT>;\r\n  private shaderLocations: ShaderLocationsVault;\r\n\r\n  private time: number;\r\n\r\n  private rayTraceView : RTView;\r\n\r\n  //trackball transform\r\n  private trackballTransform: mat4;\r\n  private trackBallOn: number;\r\n\r\n  constructor(gl: WebGLRenderingContext, rayTraceView : RTView) {\r\n    this.gl = gl;\r\n    this.time = 0;\r\n    this.modelview = new Stack<mat4>();\r\n    this.scenegraph = null;\r\n    this.rayTraceView = rayTraceView;\r\n    //set the clear color\r\n    this.gl.clearColor(0.9, 0.9, 0.7, 1);\r\n\r\n\r\n    //Our quad is in the range (-100,100) in X and Y, in the \"virtual world\" that we are drawing. We must specify what part of this virtual world must be drawn. We do this via a projection matrix, set up as below. In this case, we are going to render the part of the virtual world that is inside a square from (-200,-200) to (200,200). Since we are drawing only 2D, the last two arguments are not useful. The default Z-value chosen is 0, which means we only specify the last two numbers such that 0 is within their range (in this case we have specified them as (-100,100))\r\n    //this.proj = mat4.ortho(mat4.create(), -60, 60, -100, 100, 0.1, 10000);\r\n    this.proj = mat4.perspective(mat4.create(), 1, glMatrix.toRadian(60), 0.1, 10000);\r\n\r\n    //this.proj = mat4.perspective(this.proj, glMatrix.toRadian(60), 1, 0.1, 10000);\r\n\r\n    //We must also specify \"where\" the above part of the virtual world will be shown on the actual canvas on screen. This part of the screen where the above drawing gets pasted is called the \"viewport\", which we set here. The origin of the viewport is left,bottom. In this case we want it to span the entire canvas, so we start at (0,0) with a width and height of 400 each (matching the dimensions of the canvas specified in HTML)\r\n    this.gl.viewport(0, 0, 800, 800);\r\n  }\r\n\r\n  public getNumLights(): number {\r\n    return this.scenegraph.getNumLights();\r\n  }\r\n\r\n  public initShaders(vShaderSource: string, fShaderSource: string) {\r\n    //create and set up the shader\r\n    this.shaderProgram = WebGLUtils.createShaderProgram(this.gl, vShaderSource, fShaderSource);\r\n    //enable the current program\r\n    this.gl.useProgram(this.shaderProgram);\r\n\r\n    this.shaderLocations = new ShaderLocationsVault(this.gl, this.shaderProgram);\r\n\r\n  }\r\n\r\n  public initRenderer(): void {\r\n    let shaderVarsToVertexAttribs: Map<string, string> = new Map<string, string>();\r\n    shaderVarsToVertexAttribs.set(\"vPosition\", \"position\");\r\n    shaderVarsToVertexAttribs.set(\"vNormal\", \"normal\");\r\n    let renderer: ScenegraphRenderer = new ScenegraphRenderer(this.gl, this.shaderLocations, shaderVarsToVertexAttribs);\r\n    this.scenegraph.setRenderer(renderer);\r\n  }\r\n\r\n  public initScenegraph(): Promise<void> {\r\n    return new Promise<void>((resolve) => {\r\n      ScenegraphJSONImporter.importJSON(new VertexPNTProducer(), this.json())\r\n        .then((s: Scenegraph<VertexPNT>) => {\r\n          this.scenegraph = s;\r\n          resolve();\r\n        });\r\n    });\r\n  }\r\n\r\n  private face(): string {\r\n    return `\r\n    {\r\n      \"instances\": [\r\n        {\r\n          \"name\": \"sphere\",\r\n          \"path\": \"models/sphere.obj\"\r\n        },\r\n        {\r\n          \"name\": \"box\",\r\n          \"path\": \"models/box.obj\"\r\n        },\r\n        {\r\n          \"name\": \"cylinder\",\r\n          \"path\": \"models/cylinder.obj\"\r\n        },\r\n        {\r\n          \"name\": \"cone\",\r\n          \"path\": \"models/cone.obj\"\r\n        }\r\n      ],\r\n      \"images\": [\r\n        {\r\n          \"name\": \"checkerboard\",\r\n          \"path\": \"textures/checkerboard.png\"\r\n        },\r\n        {\r\n          \"name\": \"earth\",\r\n          \"path\": \"textures/earthmap.png\"\r\n        },\r\n        {\r\n          \"name\": \"white\",\r\n          \"path\": \"textures/white.png\"\r\n        }\r\n      ],\r\n      \"root\": {\r\n        \"type\": \"group\",\r\n        \"name\": \"Root of scene graph\",\r\n        \"lights\": [\r\n          {\r\n            \"ambient\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"diffuse\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"specular\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"position\": [\r\n              0.0,\r\n              100.0,\r\n              0.0,\r\n              1.0\r\n            ],\r\n            \"spotdirection\": [\r\n              0.0,\r\n              -1.0,\r\n              0.0,\r\n              0.0\r\n            ],\r\n            \"spotcutoff\": 25.0\r\n          }\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"type\": \"transform\",\r\n            \"transform\": [\r\n              {\r\n                \"scale\": [\r\n                  200.0,\r\n                  5.0,\r\n                  200.0\r\n                ]\r\n              }\r\n            ],\r\n            \"child\": {\r\n              \"type\": \"object\",\r\n              \"instanceof\": \"box\",\r\n              \"material\": {\r\n                \"ambient\": [\r\n                  0.2,\r\n                  0.2,\r\n                  0.2,\r\n                  1.0\r\n                ],\r\n                \"diffuse\": [\r\n                  0.8,\r\n                  0.8,\r\n                  0.8,\r\n                  1.0\r\n                ],\r\n                \"specular\": [\r\n                  0.8,\r\n                  0.8,\r\n                  0.8,\r\n                  1.0\r\n                ],\r\n                \"emission\": [\r\n                  0.0,\r\n                  0.0,\r\n                  0.0,\r\n                  1.0\r\n                ],\r\n                \"shininess\": 100.0,\r\n                \"absorption\": 1.0,\r\n                \"reflection\": 0.0,\r\n                \"transparency\": 0.0,\r\n                \"refractive_index\": 0.0\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"transform\",\r\n            \"transform\": [\r\n              {\r\n                \"translate\": [\r\n                  0.0,\r\n                  25.0,\r\n                  0.0\r\n                ]\r\n              }\r\n            ],\r\n            \"child\": {\r\n              \"type\": \"group\",\r\n              \"name\": \"face\",\r\n              \"children\": [\r\n                {\r\n                  \"type\": \"transform\",\r\n                  \"name\": \"actualface\",\r\n                  \"lights\": [\r\n                    {\r\n                      \"ambient\": [\r\n                        0.4,\r\n                        0.4,\r\n                        0.4\r\n                      ],\r\n                      \"diffuse\": [\r\n                        0.4,\r\n                        0.4,\r\n                        0.4\r\n                      ],\r\n                      \"specular\": [\r\n                        0.4,\r\n                        0.4,\r\n                        0.4\r\n                      ],\r\n                      \"position\": [\r\n                        0.0,\r\n                        100.0,\r\n                        100.0,\r\n                        1.0\r\n                      ],\r\n                      \"spotdirection\": [\r\n                        0.0,\r\n                        0.0,\r\n                        1.0,\r\n                        0.0\r\n                      ],\r\n                      \"spotcutoff\": 180.0\r\n                    }\r\n                  ],\r\n                  \"transform\": [\r\n                    {\r\n                      \"scale\": [\r\n                        20.0,\r\n                        25.0,\r\n                        20.0\r\n                      ]\r\n                    }\r\n                  ],\r\n                  \"child\": {\r\n                    \"type\": \"object\",\r\n                    \"instanceof\": \"sphere\",\r\n                    \"texture\": \"earth\",\r\n                    \"material\": {\r\n                      \"ambient\": [\r\n                        0.2,\r\n                        0.2,\r\n                        0.1,\r\n                        1.0\r\n                      ],\r\n                      \"diffuse\": [\r\n                        0.8,\r\n                        0.8,\r\n                        0.6,\r\n                        1.0\r\n                      ],\r\n                      \"specular\": [\r\n                        0.8,\r\n                        0.8,\r\n                        0.6,\r\n                        1.0\r\n                      ],\r\n                      \"emission\": [\r\n                        0.0,\r\n                        0.0,\r\n                        0.0,\r\n                        1.0\r\n                      ],\r\n                      \"shininess\": 100.0,\r\n                      \"absorption\": 1.0,\r\n                      \"reflection\": 0.0,\r\n                      \"transparency\": 0.0,\r\n                      \"refractive_index\": 0.0\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  \"type\": \"transform\",\r\n                  \"name\": \"lefteye\",\r\n                  \"transform\": [\r\n                    {\r\n                      \"translate\": [\r\n                        7.0,\r\n                        15.0,\r\n                        12.0\r\n                      ]\r\n                    },\r\n                    {\r\n                      \"scale\": [\r\n                        3.0,\r\n                        4.0,\r\n                        3.0\r\n                      ]\r\n                    }\r\n                  ],\r\n                  \"child\": {\r\n                    \"type\": \"object\",\r\n                    \"instanceof\": \"sphere\",\r\n                    \"material\": {\r\n                      \"ambient\": [\r\n                        0.1,\r\n                        0.1,\r\n                        0.1,\r\n                        1.0\r\n                      ],\r\n                      \"diffuse\": [\r\n                        0.2,\r\n                        0.2,\r\n                        0.2,\r\n                        1.0\r\n                      ],\r\n                      \"specular\": [\r\n                        0.9,\r\n                        0.9,\r\n                        0.9,\r\n                        1.0\r\n                      ],\r\n                      \"emission\": [\r\n                        0.0,\r\n                        0.0,\r\n                        0.0,\r\n                        1.0\r\n                      ],\r\n                      \"shininess\": 100.0,\r\n                      \"absorption\": 1.0,\r\n                      \"reflection\": 0.0,\r\n                      \"transparency\": 0.0,\r\n                      \"refractive_index\": 0.0\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  \"type\": \"transform\",\r\n                  \"name\": \"righteye\",\r\n                  \"transform\": [\r\n                    {\r\n                      \"translate\": [\r\n                        -7.0,\r\n                        15.0,\r\n                        12.0\r\n                      ]\r\n                    },\r\n                    {\r\n                      \"scale\": [\r\n                        3.0,\r\n                        4.0,\r\n                        3.0\r\n                      ]\r\n                    }\r\n                  ],\r\n                  \"child\": {\r\n                    \"type\": \"object\",\r\n                    \"instanceof\": \"sphere\",\r\n                    \"material\": {\r\n                      \"ambient\": [\r\n                        0.1,\r\n                        0.1,\r\n                        0.1,\r\n                        1.0\r\n                      ],\r\n                      \"diffuse\": [\r\n                        0.2,\r\n                        0.2,\r\n                        0.2,\r\n                        1.0\r\n                      ],\r\n                      \"specular\": [\r\n                        0.9,\r\n                        0.9,\r\n                        0.9,\r\n                        1.0\r\n                      ],\r\n                      \"emission\": [\r\n                        0.0,\r\n                        0.0,\r\n                        0.0,\r\n                        1.0\r\n                      ],\r\n                      \"shininess\": 100.0,\r\n                      \"absorption\": 1.0,\r\n                      \"reflection\": 0.0,\r\n                      \"transparency\": 0.0,\r\n                      \"refractive_index\": 0.0\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  \"type\": \"transform\",\r\n                  \"name\": \"nose\",\r\n                  \"transform\": [\r\n                    {\r\n                      \"translate\": [\r\n                        0.0,\r\n                        10.0,\r\n                        10.0\r\n                      ]\r\n                    },\r\n                    {\r\n                      \"rotate\": [\r\n                        90.0,\r\n                        1.0,\r\n                        0.0,\r\n                        0.0\r\n                      ]\r\n                    },\r\n                    {\r\n                      \"scale\": [\r\n                        5.0,\r\n                        20.0,\r\n                        5.0\r\n                      ]\r\n                    }\r\n                  ],\r\n                  \"child\": {\r\n                    \"type\": \"object\",\r\n                    \"instanceof\": \"cylinder\",\r\n                    \"material\": {\r\n                      \"ambient\": [\r\n                        0.2,\r\n                        0.0,\r\n                        0.0,\r\n                        1.0\r\n                      ],\r\n                      \"diffuse\": [\r\n                        0.8,\r\n                        0.0,\r\n                        0.0,\r\n                        1.0\r\n                      ],\r\n                      \"specular\": [\r\n                        0.8,\r\n                        0.0,\r\n                        0.0,\r\n                        1.0\r\n                      ],\r\n                      \"emission\": [\r\n                        0.0,\r\n                        0.0,\r\n                        0.0,\r\n                        1.0\r\n                      ],\r\n                      \"shininess\": 100.0,\r\n                      \"absorption\": 1.0,\r\n                      \"reflection\": 0.0,\r\n                      \"transparency\": 0.0,\r\n                      \"refractive_index\": 0.0\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  \"type\": \"transform\",\r\n                  \"name\": \"hat\",\r\n                  \"transform\": [\r\n                    {\r\n                      \"translate\": [\r\n                        0.0,\r\n                        20.0,\r\n                        0.0\r\n                      ]\r\n                    },\r\n                    {\r\n                      \"scale\": [\r\n                        10.0,\r\n                        25.0,\r\n                        10.0\r\n                      ]\r\n                    }\r\n                  ],\r\n                  \"child\": {\r\n                    \"type\": \"object\",\r\n                    \"instanceof\": \"cone\",\r\n                    \"material\": {\r\n                      \"ambient\": [\r\n                        0.1,\r\n                        0.0,\r\n                        0.1,\r\n                        1.0\r\n                      ],\r\n                      \"diffuse\": [\r\n                        0.8,\r\n                        0.0,\r\n                        0.8,\r\n                        1.0\r\n                      ],\r\n                      \"specular\": [\r\n                        0.8,\r\n                        0.0,\r\n                        0.8,\r\n                        1.0\r\n                      ],\r\n                      \"emission\": [\r\n                        0.0,\r\n                        0.0,\r\n                        0.0,\r\n                        1.0\r\n                      ],\r\n                      \"shininess\": 100.0,\r\n                      \"absorption\": 1.0,\r\n                      \"reflection\": 0.0,\r\n                      \"transparency\": 0.0,\r\n                      \"refractive_index\": 0.0\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    \r\n    \r\n    `;\r\n  }\r\n\r\n  //a JSON representation of a jack-in-the-box\r\n  private json2(): string {\r\n    return `\r\n        {\r\n            \"instances\": [\r\n            {\r\n                \"name\": \"box\",\r\n                \"path\": \"models/box.obj\"\r\n            }\r\n            ],\r\n            \"root\": {\r\n                \"type\": \"group\",\r\n                \"name\": \"root\",\r\n                \"lights\": [\r\n          {\r\n            \"ambient\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"diffuse\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"specular\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"position\": [\r\n              0.0,\r\n              100.0,\r\n              0.0,\r\n              1.0\r\n            ],\r\n            \"spotdirection\": [\r\n              0.0,\r\n              -1.0,\r\n              0.0,\r\n              0.0\r\n            ],\r\n            \"spotcutoff\": 50.0\r\n          }\r\n        ],\r\n                \"children\": [\r\n                    {\r\n                        \"type\":\"transform\",\r\n                        \"name\": \"box-transform\",\r\n                        \"transform\": [\r\n                            {\"scale\": [50,50,-50]}\r\n                        ],\r\n                        \"child\": {\r\n                            \"type\": \"object\",\r\n                            \"name\": \"boxnode\",\r\n                            \"instanceof\": \"box\",\r\n                            \"material\": \r\n                            {\r\n                              \"ambient\": [\r\n                                0.1,\r\n                                0.0,\r\n                                0.1,\r\n                                1.0\r\n                              ],\r\n                              \"diffuse\": [\r\n                                0.8,\r\n                                0.0,\r\n                                0.8,\r\n                                1.0\r\n                              ],\r\n                              \"specular\": [\r\n                                0.8,\r\n                                0.0,\r\n                                0.8,\r\n                                1.0\r\n                              ],\r\n                              \"emission\": [\r\n                                0.0,\r\n                                0.0,\r\n                                0.0,\r\n                                1.0\r\n                              ],\r\n                              \"shininess\": 100.0,\r\n                              \"absorption\": 1.0,\r\n                              \"reflection\": 0.0,\r\n                              \"transparency\": 0.0,\r\n                              \"refractive_index\": 0.0\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        `;\r\n  }\r\n\r\n  //a JSON representation of a simple scene graph\r\n  private json(): string {\r\n    return `\r\n        {\r\n            \"instances\": [\r\n            {\r\n                \"name\": \"sphere\",\r\n                \"path\": \"models/sphere.obj\"\r\n            }\r\n            ],\r\n            \"root\": {\r\n                \"type\": \"group\",\r\n                \"name\": \"root\",\r\n                \"lights\": [\r\n          {\r\n            \"ambient\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"diffuse\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"specular\": [\r\n              0.8,\r\n              0.8,\r\n              0.8\r\n            ],\r\n            \"position\": [\r\n              0.0,\r\n              100.0,\r\n              0.0,\r\n              1.0\r\n            ],\r\n            \"spotdirection\": [\r\n              0.0,\r\n              -1.0,\r\n              0.0,\r\n              0.0\r\n            ],\r\n            \"spotcutoff\": 50.0\r\n          }\r\n        ],\r\n                \"children\": [\r\n                    {\r\n                        \"type\":\"transform\",\r\n                        \"name\": \"sphere-transform\",\r\n                        \"transform\": [\r\n                            {\"scale\": [50,50,-50]}\r\n                        ],\r\n                        \"child\": {\r\n                            \"type\": \"object\",\r\n                            \"name\": \"spherenode\",\r\n                            \"instanceof\": \"sphere\",\r\n                            \"material\": \r\n                            {\r\n                              \"ambient\": [\r\n                                0.1,\r\n                                0.0,\r\n                                0.1,\r\n                                1.0\r\n                              ],\r\n                              \"diffuse\": [\r\n                                0.8,\r\n                                0.0,\r\n                                0.8,\r\n                                1.0\r\n                              ],\r\n                              \"specular\": [\r\n                                0.8,\r\n                                0.0,\r\n                                0.8,\r\n                                1.0\r\n                              ],\r\n                              \"emission\": [\r\n                                0.0,\r\n                                0.0,\r\n                                0.0,\r\n                                1.0\r\n                              ],\r\n                              \"shininess\": 100.0,\r\n                              \"absorption\": 1.0,\r\n                              \"reflection\": 0.0,\r\n                              \"transparency\": 0.0,\r\n                              \"refractive_index\": 0.0\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        `;\r\n  }\r\n\r\n  public animate(): void {\r\n    this.time += 1;\r\n    if (this.scenegraph != null) {\r\n      this.scenegraph.animate(this.time);\r\n    }\r\n    this.draw();\r\n  }\r\n\r\n  public draw(): void {\r\n\r\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n    this.gl.enable(this.gl.DEPTH_TEST);\r\n\r\n    if (this.scenegraph == null) {\r\n      return;\r\n    }\r\n\r\n    this.gl.useProgram(this.shaderProgram)\r\n\r\n    while (!this.modelview.isEmpty())\r\n      this.modelview.pop();\r\n\r\n    /*\r\n     *In order to change the shape of this triangle, we can either move the vertex positions above, or \"transform\" them\r\n     * We use a modelview matrix to store the transformations to be applied to our triangle.\r\n     * Right now this matrix is identity, which means \"no transformations\"\r\n     */\r\n    this.modelview.push(mat4.create());\r\n    this.modelview.push(mat4.clone(this.modelview.peek()));\r\n    let cameraPos : vec3 = vec3.fromValues(0, 0, 500);\r\n    let position : vec3 = vec3.create();\r\n    // This is for simple objects\r\n    mat4.lookAt(this.modelview.peek(),cameraPos , vec3.fromValues(0, 0, 0), vec3.fromValues(0, 1, 0));\r\n    //console.log(this.modelview.peek());\r\n    //Calculate the ray trace here by the model view stack from the camere\r\n    mat4.getTranslation(position, this.modelview.peek());\r\n    //console.log(position[0],position[1],position[2]);\r\n    let colors : vec3[] = [];\r\n    let w : number = 800;\r\n    let h : number = 800;\r\n    colors = this.rayTrace(w,h,this.modelview,cameraPos);\r\n    //This is for hogwarts model \r\n    //mat4.lookAt(this.modelview.peek(), vec3.fromValues(100, 100, 150), vec3.fromValues(75, 50, 0), vec3.fromValues(0, 1, 0));\r\n\r\n    this.gl.uniformMatrix4fv(this.shaderLocations.getUniformLocation(\"projection\"), false, this.proj);\r\n    this.rayTraceView.fillCanvas(colors,w,h);\r\n\r\n\r\n\r\n    this.scenegraph.draw(this.modelview);\r\n  }\r\n\r\n  public rayTrace(width : number, height : number, modelview : Stack<mat4>, cameraPos : vec3) : vec3[]{\r\n    let i : number;\r\n    let j : number;\r\n    let colors : vec3[] = [];\r\n    // go through the row first then to the column\r\n    for( i= -height / 2; i < height / 2; i ++) {\r\n      for(j = -width / 2; j < width / 2; j ++) {\r\n        let pixel : vec3 = vec3.fromValues(cameraPos[0] + j, cameraPos[1] + i, 0);\r\n        let d : vec3 = vec3.create();\r\n        let u : vec3 = vec3.create();\r\n        let v : vec3 = vec3.create();\r\n        //TODO:\r\n        //Not sure the sign of this ray at z axis\r\n        vec3.scale(d, vec3.fromValues(0,0,1), cameraPos[2]);\r\n        vec3.scale(u, vec3.fromValues(1,0,0), pixel[0]);\r\n        vec3.scale(v, vec3.fromValues(0,1,0), pixel[1]);\r\n        let direction : vec3 = vec3.create();\r\n        vec3.add(direction, d,u);\r\n        vec3.add(direction, direction, v);\r\n        //vec3.normalize(direction,direction);\r\n\r\n        let ray : Ray = new Ray(cameraPos, direction);\r\n        //console.log(ray.getDirection()[0], ray.getDirection()[1], ray.getDirection()[2]);\r\n        let color : vec3 = this.rayCast(ray, modelview);\r\n        //console.log(colors);\r\n        colors.push(color);\r\n      }\r\n    }\r\n    //console.log(colors);\r\n    return colors;\r\n  }\r\n\r\n  public rayCast(ray : Ray, modelview : Stack<mat4>) : vec3 {\r\n    let blackColor : vec3 = vec3.fromValues(0,0,0);\r\n    let redColor : vec3 = vec3.fromValues(1,0,0);\r\n    let whiteColor : vec3 = vec3.fromValues(1,1,1);\r\n    let color : vec3 = vec3.create();\r\n    let hitRecord : HitRecord = this.scenegraph.closest_intersection(ray, modelview);\r\n    //console.log(hitRecord.getTime());\r\n    if(hitRecord.getTime() < Infinity) {\r\n      //console.log(hitRecord.getTime());\r\n      return whiteColor;\r\n    }\r\n    else {\r\n      return blackColor;\r\n    }\r\n  }\r\n\r\n  public freeMeshes(): void {\r\n    this.scenegraph.dispose();\r\n  }\r\n\r\n  public setFeatures(features: Features): void {\r\n    /*\r\n    window.addEventListener(\"keydown\", ev => features.keyPress(ev.code));\r\n        //mouse events\r\n        let canvas: HTMLCanvasElement = <HTMLCanvasElement>document.querySelector(\"#glCanvas\");\r\n        let canvasBounds: ClientRect = canvas.getBoundingClientRect();\r\n        let width: number = Number(canvas.getAttribute(\"width\"));\r\n        let height: number = Number(canvas.getAttribute(\"height\"));\r\n\r\n        canvas.addEventListener(\"mousedown\", ev => features.mousePress(ev.x - canvasBounds.left, (ev.y) + canvasBounds.top));\r\n        canvas.addEventListener(\"mouseup\", ev => features.mouseRelease(ev.x - canvasBounds.left, (ev.y) + canvasBounds.top));\r\n        canvas.addEventListener(\"mousemove\", ev => features.mouseDragged(ev.x - canvasBounds.left, (ev.y) + canvasBounds.top));\r\n        */\r\n  }\r\n\r\n  private createAeroplane(x: number, y: number, z: number): string {\r\n    return `{\r\n            \"type\":\"transform\",\r\n            \"name\": \"aeroplane-transform\",\r\n            \"transform\": [\r\n                {\"rotate\": [90,1,0,0]},\r\n                {\"scale\": [${x},${y},${z}]},\r\n                {\"translate\":[0,0,0]}\r\n            ],\r\n            \"child\": {\r\n                \"type\": \"object\",\r\n                \"name\": \"aeroplanenode\",\r\n                \"instanceof\": \"aeroplane\",\r\n                \"material\": {\r\n                    \"ambient\": [${Math.random()},${Math.random()},${Math.random()}, ${Math.random()}],\r\n                    \"diffuse\": [\r\n                      0.8,\r\n                      0.8,\r\n                      0.8,\r\n                      1.0\r\n                    ],\r\n                    \"specular\": [\r\n                      0.8,\r\n                      0.8,\r\n                      0.8,\r\n                      1.0\r\n                    ],\r\n                    \"emission\": [\r\n                      0.0,\r\n                      0.0,\r\n                      0.0,\r\n                      1.0\r\n                    ],\r\n                    \"shininess\": 25.0,\r\n                    \"absorption\": 1.0,\r\n                    \"reflection\": 0.0,\r\n                    \"transparency\": 0.0,\r\n                    \"refractive_index\": 0.0\r\n                }\r\n            }\r\n        }`;\r\n  }\r\n\r\n  private createBox(x: number, y: number, z: number, tX: number, tY: number, tZ: number): string {\r\n    return `{\r\n            \"type\":\"transform\",\r\n            \"name\": \"box-transform\",\r\n            \"transform\": [\r\n                {\"translate\": [${tX + x / 2},${tY + y / 2},${tZ + z / 2}]},\r\n                {\"scale\": [${x},${y},${z}]}\r\n            ],\r\n            \"child\": {\r\n                \"type\": \"object\",\r\n                \"name\": \"boxnode\",\r\n                \"instanceof\": \"box\",\r\n                \"texture\": \"white\",\r\n                \"material\": {\r\n                  \"ambient\": [${Math.random()},${Math.random()},${Math.random()}, ${Math.random()}],\r\n                  \"diffuse\": [\r\n                    0.8,\r\n                    0.8,\r\n                    0.8,\r\n                    1.0\r\n                  ],\r\n                  \"specular\": [\r\n                    0.8,\r\n                    0.8,\r\n                    0.8,\r\n                    1.0\r\n                  ],\r\n                  \"emission\": [\r\n                    0.0,\r\n                    0.0,\r\n                    0.0,\r\n                    1.0\r\n                  ],\r\n                  \"shininess\": 25.0,\r\n                  \"absorption\": 1.0,\r\n                  \"reflection\": 0.0,\r\n                  \"transparency\": 0.0,\r\n                  \"refractive_index\": 0.0\r\n                }\r\n            }\r\n        }`;\r\n  }\r\n  private createCone(x: number, y: number, z: number, tX: number, tY: number, tZ: number, texture: string): string {\r\n    return `{\r\n            \"type\":\"transform\",\r\n            \"name\": \"cone-transform\",\r\n            \"transform\": [\r\n                {\"translate\": [${tX + x},${tY},${tZ + z}]},\r\n                {\"scale\": [${x},${y},${z}]}\r\n            ],\r\n            \"child\": {\r\n                \"type\": \"object\",\r\n                \"name\": \"conenode\",\r\n                \"instanceof\": \"cone\",\r\n                \"texture\": \"${texture}\",\r\n                \"material\": {\r\n                    \"ambient\": [1,1,1,1],\r\n                    \"diffuse\": [\r\n                      0.8,\r\n                      0.8,\r\n                      0.8,\r\n                      1.0\r\n                    ],\r\n                    \"specular\": [\r\n                      0.8,\r\n                      0.8,\r\n                      0.8,\r\n                      1.0\r\n                    ],\r\n                    \"emission\": [\r\n                      0.0,\r\n                      0.0,\r\n                      0.0,\r\n                      1.0\r\n                    ],\r\n                    \"shininess\": 25.0,\r\n                    \"absorption\": 1.0,\r\n                    \"reflection\": 0.0,\r\n                    \"transparency\": 0.0,\r\n                    \"refractive_index\": 0.0\r\n                }\r\n            }\r\n        }`;\r\n  }\r\n\r\n  private createCylinder(x: number, y: number, z: number, tX: number, tY: number, tZ: number, textureName: string): string {\r\n    if (textureName == \"\") {\r\n      return `{\r\n        \"type\":\"transform\",\r\n        \"name\": \"cylinder-transform\",\r\n        \"transform\": [\r\n            {\"translate\": [${tX + x},${tY},${tZ + z}]},\r\n            {\"scale\": [${x},${y},${z}]}\r\n        ],\r\n        \"child\": {\r\n            \"type\": \"object\",\r\n            \"name\": \"cylindernode\",\r\n            \"instanceof\": \"cylinder\",\r\n            \"texture\": \"white\",\r\n            \"material\": {\r\n                \"ambient\": [${Math.random()},${Math.random()},${Math.random()}, ${Math.random()}],\r\n                \"diffuse\": [\r\n                  0.8,\r\n                  0.8,\r\n                  0.8,\r\n                  1.0\r\n                ],\r\n                \"specular\": [\r\n                  0.8,\r\n                  0.8,\r\n                  0.8,\r\n                  1.0\r\n                ],\r\n                \"emission\": [\r\n                  0.0,\r\n                  0.0,\r\n                  0.0,\r\n                  1.0\r\n                ],\r\n                \"shininess\": 25.0,\r\n                \"absorption\": 1.0,\r\n                \"reflection\": 0.0,\r\n                \"transparency\": 0.0,\r\n                \"refractive_index\": 0.0\r\n            }\r\n        }\r\n    }`;\r\n    }\r\n    else {\r\n      return `{\r\n            \"type\":\"transform\",\r\n            \"name\": \"cylinder-transform\",\r\n            \"transform\": [\r\n                {\"translate\": [${tX + x},${tY},${tZ + z}]},\r\n                {\"scale\": [${x},${y},${z}]}\r\n            ],\r\n            \"child\": {\r\n                \"type\": \"object\",\r\n                \"name\": \"cylindernode\",\r\n                \"instanceof\": \"cylinder\",\r\n                \"texture\" : \"${textureName}\",\r\n                \"material\": {\r\n                    \"ambient\": [1,1,1,1],\r\n                \"diffuse\": [\r\n                  0.8,\r\n                  0.8,\r\n                  0.8,\r\n                  1.0\r\n                ],\r\n                \"specular\": [\r\n                  0.8,\r\n                  0.8,\r\n                  0.8,\r\n                  1.0\r\n                ],\r\n                \"emission\": [\r\n                  0.0,\r\n                  0.0,\r\n                  0.0,\r\n                  1.0\r\n                ],\r\n                \"shininess\": 25.0,\r\n                \"absorption\": 1.0,\r\n                \"reflection\": 0.0,\r\n                \"transparency\": 0.0,\r\n                \"refractive_index\": 0.0\r\n                }\r\n            }\r\n        }`;\r\n    }\r\n  }\r\n\r\n  private createTurrets(boxScaleX: number, boxScaleY: number, boxScaleZ: number, cylinderScaleX: number,\r\n    cylinderScaleY: number, cylinderScaleZ: number, coneScaleX: number, coneScaleY: number, coneScaleZ: number,\r\n    tX: number, tY: number, tZ: number, texture: string, isLarge: boolean): string {\r\n    let textureName: string = \"\";\r\n    if (isLarge) {\r\n      textureName = texture;\r\n    }\r\n    return `{\r\n            \"type\":\"transform\",\r\n            \"name\": \"box-transform\",\r\n            \"transform\": [\r\n                {\"translate\": [${tX},${tY},${tZ}]}\r\n            ],\r\n            \"child\": {\r\n                \"type\": \"group\",\r\n                \"children\" : [\r\n                    ${this.createBox(boxScaleX, boxScaleY, boxScaleZ, 0, 0, 0)},\r\n                    ${this.createCylinder(cylinderScaleX, cylinderScaleY, cylinderScaleZ, 0, boxScaleY, 0, textureName)},\r\n                    ${this.createCone(coneScaleX, coneScaleY, coneScaleZ, 0, boxScaleY + cylinderScaleY, 0, \"checkerboard\")}    \r\n                ]\r\n            }\r\n        }`;\r\n  }\r\n\r\n  private jsonHogwarts(): string {\r\n    let box1: string = this.createBox(50, 20, -10, 25, 0, -45);\r\n    let box2: string = this.createBox(20, 20, -10, 85, 0, -45);\r\n    let box3: string = this.createBox(20, 20, -10, 121, 0, -45);\r\n    let box4: string = this.createBox(15, 20, -35, 5, 0, -10);\r\n    let box5: string = this.createBox(20, 20, -35, 20, 0, -10);\r\n    let box6: string = this.createBox(15, 20, -20, 40, 0, -25);\r\n    let box7: string = this.createBox(10, 20, -35, 55, 0, -10);\r\n    let box8: string = this.createBox(10, 20, -15, 65, 0, -20);\r\n    let box9: string = this.createBox(10, 20, -35, 75, 0, -10);\r\n    let box10: string = this.createBox(36, 20, -10, 85, 0, -22);\r\n    let box11: string = this.createBox(10, 20, -15, 131, 0, -22);\r\n    let box12: string = this.createBox(5, 20, -10, 10, 0, 0);\r\n    let box13: string = this.createBox(15, 20, -10, 25, 0, 0);\r\n    let turret1: string = this.createTurrets(10, 50, -10, 5, 5, -5, 5, 10, -5, 0, 0, 0, \"\", false);\r\n    let turret2: string = this.createTurrets(10, 50, -10, 5, 5, -5, 5, 10, -5, 15, 0, 0, \"\", false);\r\n    let turret3: string = this.createTurrets(10, 50, -10, 5, 5, -5, 5, 10, -5, 75, 0, 0, \"\", false);\r\n    let turret4: string = this.createTurrets(15, 50, -15, 7.5, 10, -7.5, 7.5, 10, -7.5, 40, 0, -10, \"\", false);\r\n    let turret5: string = this.createTurrets(10, 50, -10, 5, 5, -5, 5, 10, -5, 65, 0, -10, \"\", false);\r\n    let turret6: string = this.createTurrets(10, 50, -10, 5, 5, -5, 5, 10, -5, 121, 0, -20, \"\", false);\r\n    let turret7: string = this.createTurrets(10, 50, -10, 5, 5, -5, 5, 10, -5, 65, 0, -35, \"\", false);\r\n    let turret8: string = this.createTurrets(10, 50, -10, 5, 5, -5, 5, 10, -5, 131, 0, -37, \"\", false);\r\n    let turret9: string = this.createTurrets(10, 50, -10, 5, 5, -5, 5, 10, -5, 75, 0, -45, \"brick2\", false);\r\n    let turret10: string = this.createTurrets(0, 0, 0, 12.5, 40, -12.5, 12.5, 50, -12.5, 100.5, 0, -37.5, \"wall\", true);\r\n    let quadTurret1: string = this.createTurrets(25, 20, -25, 0, 0, 0, 0, 0, 0, 0, 0, -45, \"wall\", true);\r\n    let quadTurret2: string = this.createTurrets(0, 0, 0, 11, 25, -11, 0, 0, 0, 1.5, 20, -46.5, \"wall\", true);\r\n    let quadTurret3: string = this.createTurrets(0, 0, 0, 10, 40, -10, 10, 20, -10, 2.5, 45, -47.5, \"wall\", true);\r\n    let minirate1: string = this.createTurrets(0, 0, 0, 4, 30, -4, 4, 10, -4, 0, 30, -53, \"wall\", true);\r\n    let minirate2: string = this.createTurrets(0, 0, 0, 4, 30, -4, 4, 10, -4, 17, 30, -53, \"wall\", true);\r\n    let minirate3: string = this.createTurrets(0, 0, 0, 4, 30, -4, 4, 10, -4, 8.5, 30, -45, \"wall\", true);\r\n    let minirate4: string = this.createTurrets(0, 0, 0, 4, 30, -4, 4, 10, -4, 8.5, 30, -62, \"wall\", true);\r\n    let aeroplane: string = this.createAeroplane(1, 1, 1);\r\n    //Create the custom quad-turret thingy.\r\n    return `\r\n        {\r\n            \"scaleinstances\":\"false\",\r\n            \"instances\": [\r\n                {\r\n                    \"name\":\"box\",\r\n                    \"path\":\"models/box.obj\"\r\n                },\r\n                {\r\n                    \"name\":\"cylinder\",\r\n                    \"path\":\"models/cylinder.obj\"\r\n                },\r\n                {\r\n                    \"name\":\"cone\",\r\n                    \"path\":\"models/cone.obj\"\r\n                },\r\n                {\r\n                    \"name\":\"aeroplane\",\r\n                    \"path\":\"models/aeroplane.obj\"\r\n                }\r\n            ],\r\n            \"images\": [\r\n              {\r\n                \"name\": \"surface\",\r\n                \"path\": \"textures/checkerboard.png\"\r\n              },\r\n              {\r\n                \"name\": \"metal\",\r\n                \"path\": \"textures/checkerboard.png\"\r\n              },\r\n              {\r\n                \"name\" : \"wall\",\r\n                \"path\" : \"textures/brick1.png\"\r\n              },\r\n              {\r\n                \"name\" : \"brick2\",\r\n                \"path\" : \"textures/brick2.png\"\r\n              },\r\n              {\r\n                \"name\" : \"earth\",\r\n                \"path\" : \"textures/earthmap.png\"\r\n              },\r\n              {\r\n                \"name\" : \"checkerboard\",\r\n                \"path\" : \"textures/checkerboard.png\"\r\n              },\r\n              {\r\n                \"name\" : \"white\",\r\n                \"path\" : \"textures/checkerboard.png\"\r\n              }\r\n            ],\r\n            \"root\": {\r\n                \"type\": \"group\",\r\n                \"name\": \"root\",\r\n                \"lights\": [\r\n                  {\r\n                    \"ambient\": [\r\n                      0.5,\r\n                      0.5,\r\n                      0.5\r\n                    ],\r\n                    \"diffuse\": [\r\n                      0.8,\r\n                      0.8,\r\n                      0.8\r\n                    ],\r\n                    \"specular\": [\r\n                      0.8,\r\n                      0.8,\r\n                      0.8\r\n                    ],\r\n                    \"position\": [\r\n                      0.0,\r\n                      100.0,\r\n                      0.0,\r\n                      1.0\r\n                    ],\r\n                    \"spotdirection\": [\r\n                      0.0,\r\n                      -1.0,\r\n                      0.0,\r\n                      0.0\r\n                    ],\r\n                    \"spotcutoff\": 90.0\r\n                  }\r\n                ],\r\n                \"children\": [${box1}, ${box2}, ${box3}, ${box4}, ${box5}, ${box6}, \r\n                    ${box7}, ${box8}, ${box9}, ${box10}, ${box11}, ${box12}, ${box13},\r\n                    ${turret1}, ${turret2}, ${turret3}, ${turret4}, ${turret5}, ${turret6}, \r\n                    ${turret7}, ${turret8}, ${turret9}, ${turret10}, ${quadTurret1}, ${quadTurret2}, ${quadTurret3}, ${minirate1},\r\n                    ${minirate2}, ${minirate3}, ${minirate4}, ${aeroplane}]\r\n            }\r\n        }\r\n        `\r\n  }\r\n\r\n}","/**\r\n * This class implements a simple general-purpose stack using lists.\r\n */\r\n\r\nexport class Stack<T> {\r\n    private list: T[];\r\n\r\n    constructor() {\r\n        this.list = [];\r\n    }\r\n\r\n    public push(obj: T): void {\r\n        this.list.push(obj);\r\n    }\r\n\r\n    public pop(): T {\r\n        if (this.list.length == 0) {\r\n            throw new Error(\"Stack is empty: nothing to pop\");\r\n        }\r\n        return this.list.pop();\r\n    }\r\n\r\n    public peek(): T {\r\n        if (this.list.length == 0) {\r\n            throw new Error(\"Stack is empty: nothing to peek\");\r\n        }\r\n        return this.list[this.list.length - 1];\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.list.length == 0;\r\n    }\r\n}","import { IVertexData, VertexProducer } from \"%COMMON/IVertexData\";\r\nimport { vec4 } from \"gl-matrix\";\r\n\r\n/**\r\n * This class represents the attributes of a single vertex, when the position, normal and texture \r\n * coordinate of the vertex is known. It is useful in building PolygonMesh objects for many \r\n * examples.\r\n *\r\n * It implements the IVertexData interface so that it can be converted into an\r\n * array of floats, to work with WebGL buffers\r\n */\r\nexport class VertexPNT implements IVertexData {\r\n    private position: vec4;\r\n    private normal: vec4;\r\n    private texcoord: vec4;\r\n\r\n    public constructor() {\r\n        this.position = vec4.fromValues(0, 0, 0, 1);\r\n        this.texcoord = vec4.fromValues(0, 0, 0, 1);\r\n    }\r\n\r\n    public hasData(attribName: string): boolean {\r\n        switch (attribName) {\r\n            case \"position\":\r\n            case \"normal\":\r\n            case \"texcoord\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public getData(attribName: string): number[] {\r\n        let result: number[];\r\n        switch (attribName) {\r\n            case \"position\":\r\n                result = [this.position[0], this.position[1], this.position[2], this.position[3]];\r\n                break;\r\n            case \"normal\":\r\n                result = [this.normal[0], this.normal[1], this.normal[2], this.normal[3]];\r\n                break;\r\n            case \"texcoord\":\r\n                result = [this.texcoord[0], this.texcoord[1]];\r\n                break;\r\n            default:\r\n                throw new Error(\"No attribute: \" + attribName + \" found!\");\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public setData(attribName: string, data: number[]): void {\r\n        switch (attribName) {\r\n            case \"position\":\r\n                this.position = vec4.fromValues(0, 0, 0, 1);\r\n                for (let i: number = 0; i < data.length; i++) {\r\n                    this.position[i] = data[i];\r\n                }\r\n                break;\r\n            case \"normal\":\r\n                this.normal = vec4.fromValues(0, 0, 0, 0);\r\n                for (let i: number = 0; i < data.length; i++) {\r\n                    this.normal[i] = data[i];\r\n                }\r\n                break;\r\n            case \"texcoord\":\r\n                this.texcoord = vec4.fromValues(0, 0, 0, 1);\r\n                for (let i: number = 0; i < data.length; i++) {\r\n                    this.texcoord[i] = data[i];\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Attribute: \" + attribName + \" unsupported!\");\r\n        }\r\n    }\r\n\r\n    public getAllAttributes(): string[] {\r\n        return [\"position\", \"color\", \"texcoord\"];\r\n    }\r\n}\r\n\r\nexport class VertexPNTProducer implements VertexProducer<VertexPNT> {\r\n    public produce(): VertexPNT {\r\n        return new VertexPNT();\r\n    }\r\n}\r\n","/**\r\n * This class stores all the shader variables that are used by a shader program. This makes it \r\n * possible to look up shader locations without having to repeatedly use webgl functions\r\n */\r\nexport class ShaderLocationsVault {\r\n    private attribs: Map<string, number>;\r\n    private uniforms: Map<string, WebGLUniformLocation>;\r\n\r\n    public constructor(gl: WebGLRenderingContext, program: WebGLProgram) {\r\n        this.attribs = new Map<string, number>();\r\n        this.uniforms = new Map<string, WebGLUniformLocation>();\r\n        this.getAllShaderVariables(gl, program);\r\n    }\r\n\r\n    private getAllShaderVariables(gl: WebGLRenderingContext, program: WebGLProgram): void {\r\n        let numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n        for (let i: number = 0; i < numUniforms; i++) {\r\n            let uniformInfo: WebGLActiveInfo = gl.getActiveUniform(program, i);\r\n            let location: WebGLUniformLocation = gl.getUniformLocation(program, uniformInfo.name);\r\n            this.addUniformLocation(uniformInfo.name, location);\r\n        }\r\n\r\n        let numAttribs: number = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n        for (let i: number = 0; i < numAttribs; i++) {\r\n            let activeInfo: WebGLActiveInfo = gl.getActiveAttrib(program, i);\r\n            let location: number = gl.getAttribLocation(program, activeInfo.name);\r\n            this.addAttribLocation(activeInfo.name, location);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new shader variable and location\r\n     */\r\n    private addAttribLocation(varName: string, location: number) {\r\n        this.attribs.set(varName, location);\r\n    }\r\n\r\n    private addUniformLocation(varName: string, location: WebGLUniformLocation) {\r\n        this.uniforms.set(varName, location);\r\n    }\r\n\r\n    /**\r\n     * Return the location of an attrib, else return -1\r\n     *\r\n     * @param varName the shader variable name whose location is being sought\r\n     * @return the location if found, else -1\r\n     */\r\n    public getAttribLocation(varName: string): number {\r\n        if (this.attribs.has(varName)) {\r\n            return this.attribs.get(varName);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Return the location of an attrib, else return -1\r\n     *\r\n     * @param varName the shader variable name whose location is being sought\r\n     * @return the location if found, else -1\r\n     */\r\n    public getUniformLocation(varName: string): WebGLUniformLocation {\r\n        if (this.uniforms.has(varName)) {\r\n            return this.uniforms.get(varName);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n\r\n}\r\n","import { ShaderLocationsVault } from \"%COMMON/ShaderLocationsVault\"\r\nimport { RenderableMesh } from \"%COMMON/RenderableMesh\"\r\nimport { IVertexData } from \"%COMMON/IVertexData\";\r\nimport { Mesh } from \"%COMMON/PolygonMesh\"\r\nimport * as WebGLUtils from \"%COMMON/WebGLUtils\"\r\nimport { SGNode } from \"SGNode\";\r\nimport { Stack } from \"%COMMON/Stack\";\r\nimport { mat4, vec4, glMatrix } from \"gl-matrix\";\r\nimport { Material } from \"%COMMON/Material\";\r\nimport { Light } from \"%COMMON/Light\";\r\nimport { TextureObject } from \"%COMMON/TextureObject\"\r\n\r\n/**\r\n * This is a scene graph renderer implementation that works specifically with WebGL.\r\n * @author Amit Shesh\r\n */\r\nexport class ScenegraphRenderer {\r\n    protected gl: WebGLRenderingContext;\r\n    /**\r\n     * A table of shader locations and variable names\r\n     */\r\n    protected shaderLocations: ShaderLocationsVault;\r\n    /**\r\n     * A table of shader variables -> vertex attribute names in each mesh\r\n     */\r\n    protected shaderVarsToVertexAttribs: Map<string, string>;\r\n\r\n    /**\r\n     * \r\n     * A map to store all the textures\r\n     */\r\n    protected textures: Map<string, TextureObject>;\r\n    /**\r\n     * A table of renderers for individual meshes\r\n     */\r\n    protected meshRenderers: Map<String, RenderableMesh<IVertexData>>;\r\n\r\n\r\n    public constructor(gl: WebGLRenderingContext, shaderLocations: ShaderLocationsVault, shaderVarsToAttribs: Map<string, string>) {\r\n        this.gl = gl;\r\n        this.shaderLocations = shaderLocations;\r\n        this.shaderVarsToVertexAttribs = shaderVarsToAttribs;\r\n        this.meshRenderers = new Map<string, RenderableMesh<IVertexData>>();\r\n        this.textures = new Map<string, TextureObject>();\r\n    }\r\n\r\n\r\n    /**\r\n     * Add a mesh to be drawn later.\r\n     * The rendering context should be set before calling this function, as this function needs it\r\n     * This function creates a new\r\n     * {@link RenderableMesh} object for this mesh\r\n     * @param name the name by which this mesh is referred to by the scene graph\r\n     * @param mesh the {@link PolygonMesh} object that represents this mesh\r\n     * @throws Exception\r\n     */\r\n    public addMesh<K extends IVertexData>(meshName: string, mesh: Mesh.PolygonMesh<K>): void {\r\n        if (meshName in this.meshRenderers)\r\n            return;\r\n\r\n        //verify that the mesh has all the vertex attributes as specified in the map\r\n        if (mesh.getVertexCount() <= 0)\r\n            return;\r\n        let vertexData: K = mesh.getVertexAttributes()[0];\r\n        for (let [s, a] of this.shaderVarsToVertexAttribs) {\r\n            if (!vertexData.hasData(a))\r\n                throw new Error(\"Mesh does not have vertex attribute \" + a);\r\n        }\r\n        let renderableMesh: RenderableMesh<K> = new RenderableMesh<K>(this.gl, name);\r\n\r\n        renderableMesh.initMeshForRendering(this.shaderVarsToVertexAttribs, mesh);\r\n\r\n        this.meshRenderers.set(meshName, renderableMesh);\r\n    }\r\n\r\n    public addTexture(name: string, path: string): void {\r\n        let image: TextureObject;\r\n        let imageFormat: string = path.substring(path.indexOf('.') + 1);\r\n        image = new TextureObject(this.gl, name, path);\r\n\r\n        this.textures.set(name, image);\r\n    }\r\n\r\n    /**\r\n     * Begin rendering of the scene graph from the root\r\n     * @param root\r\n     * @param modelView\r\n     */\r\n    public draw(root: SGNode, modelView: Stack<mat4>): void {\r\n        let lights: Light[] = root.getLights(modelView);\r\n        this.sendLightsToShader(lights);\r\n        root.draw(this, modelView);\r\n    }\r\n\r\n    private sendLightsToShader(lights: Light[]): void {\r\n        //send all the light colors\r\n        for (let i: number = 0; i < lights.length; i++) {\r\n            let ambientLocation: string = \"light[\" + i + \"].ambient\";\r\n            let diffuseLocation: string = \"light[\" + i + \"].diffuse\";\r\n            let specularLocation: string = \"light[\" + i + \"].specular\";\r\n            let positionLocation: string = \"light[\" + i + \"].position\";\r\n            let spotDirectionLocation: string = \"light[\" + i + \"].spotDirection\";\r\n            let spotCutoffLocation: string = \"light[\" + i + \"].spotCutoff\";\r\n            this.gl.uniform3fv(this.shaderLocations.getUniformLocation(ambientLocation), lights[i].getAmbient());\r\n            this.gl.uniform3fv(this.shaderLocations.getUniformLocation(diffuseLocation), lights[i].getDiffuse());\r\n            this.gl.uniform3fv(this.shaderLocations.getUniformLocation(specularLocation), lights[i].getSpecular());\r\n            this.gl.uniform4fv(this.shaderLocations.getUniformLocation(positionLocation), lights[i].getPosition());\r\n            this.gl.uniform4fv(this.shaderLocations.getUniformLocation(spotDirectionLocation), lights[i].getSpotDirection());\r\n            //console.log(\"spot angle: \" + lights[i].getSpotCutoff());\r\n            this.gl.uniform1f(this.shaderLocations.getUniformLocation(spotCutoffLocation), Math.cos(glMatrix.toRadian(lights[i].getSpotCutoff())));\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        for (let mesh of this.meshRenderers.values()) {\r\n            mesh.cleanup();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a specific mesh.\r\n     * If the mesh has been added to this renderer, it delegates to its correspond mesh renderer\r\n     * This function first passes the material to the shader. Currently it uses the shader variable\r\n     * \"vColor\" and passes it the ambient part of the material. When lighting is enabled, this \r\n     * method must be overriden to set the ambient, diffuse, specular, shininess etc. values to the \r\n     * shader\r\n     * @param name\r\n     * @param material\r\n     * @param transformation\r\n     */\r\n    public drawMesh(meshName: string, material: Material, textureName: string, transformation: mat4) {\r\n        if (this.meshRenderers.has(meshName)) {\r\n            //get the color\r\n\r\n            let loc: WebGLUniformLocation = this.shaderLocations.getUniformLocation(\"material.ambient\");\r\n            this.gl.uniform3fv(loc, material.getAmbient());\r\n\r\n            loc = this.shaderLocations.getUniformLocation(\"material.diffuse\");\r\n            this.gl.uniform3fv(loc, material.getDiffuse());\r\n\r\n            loc = this.shaderLocations.getUniformLocation(\"material.specular\");\r\n            this.gl.uniform3fv(loc, material.getSpecular());\r\n\r\n            loc = this.shaderLocations.getUniformLocation(\"material.shininess\");\r\n            this.gl.uniform1f(loc, material.getShininess());\r\n\r\n\r\n            loc = this.shaderLocations.getUniformLocation(\"modelview\");\r\n            this.gl.uniformMatrix4fv(loc, false, transformation);\r\n\r\n            let normalMatrix: mat4 = mat4.create();\r\n            mat4.invert(normalMatrix, transformation);\r\n            mat4.transpose(normalMatrix, normalMatrix);\r\n\r\n            loc = this.shaderLocations.getUniformLocation(\"normalmatrix\");\r\n            this.gl.uniformMatrix4fv(loc, false, normalMatrix);\r\n            /*\r\n\r\n            //matrix to flip the texture vertically\r\n            let flipTextureMatrix: mat4 = mat4.create();\r\n            mat4.translate(flipTextureMatrix, flipTextureMatrix, [0, 1, 0]);\r\n            mat4.scale(flipTextureMatrix, flipTextureMatrix, [1, -1, 1]);\r\n\r\n            loc = this.shaderLocations.getUniformLocation(\"texturematrix\");\r\n            this.gl.uniformMatrix4fv(loc, false, flipTextureMatrix);\r\n\r\n            this.gl.activeTexture(this.gl.TEXTURE0);\r\n            loc = this.shaderLocations.getUniformLocation(\"image\");\r\n            this.gl.uniform1i(loc, 0);\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.textures.get(textureName).getTextureID());\r\n\r\n            //set parameters for texture filtering\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_LINEAR);\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\r\n\r\n            // Prevents s-coordinate wrapping (repeating).\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\r\n            // Prevents t-coordinate wrapping (repeating).\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\r\n            */\r\n\r\n\r\n            this.meshRenderers.get(meshName).draw(this.shaderLocations);\r\n        }\r\n    }\r\n}","import { Mesh } from \"./PolygonMesh\";\r\nimport { IVertexData } from \"./IVertexData\";\r\nimport { ShaderLocationsVault } from \"./ShaderLocationsVault\";\r\n\r\n/**\r\n * This class represents a WebGL renderable mesh. It takes in a regular triangle mesh, and builds the buffers to render it \r\n */\r\nexport class RenderableMesh<VertexType extends IVertexData> {\r\n    protected vbo: WebGLBuffer;//vertex buffer object\r\n    protected ibo: WebGLBuffer; //index buffer object\r\n    protected gl: WebGLRenderingContext;\r\n    protected mesh: Mesh.PolygonMesh<VertexType>;\r\n    protected name: string; //a unique \"name\" for this object\r\n    protected numIndices: number;\r\n    protected stride: number; //the gap between two vertex data\r\n    protected offsets: Map<string, number>;\r\n    protected vertexDataLengths: Map<string, number>; //the number of \"numbers\" per attribute of the vertex (obtained from the mesh data)\r\n    protected shaderVarsToAttribs: Map<string, string>; //the correspondence between variable names used in the shader, vs the names used in attributes of \"IVertexData\"\r\n    protected faceType: number; //what type of primitive is to be drawn\r\n\r\n    /**\r\n     * Create a blank RenderableMesh using a WebGL rendering context and a name\r\n     *\r\n     * @param gl   the WebGLRenderingContext context to be used for all Webgl commands on this\r\n     *             object\r\n     * @param name a name of the object\r\n     */\r\n\r\n    public constructor(gl: WebGLRenderingContext, name: string) {\r\n        this.gl = gl;\r\n        this.vbo = gl.createBuffer();\r\n        this.ibo = gl.createBuffer();\r\n        this.numIndices = 0;\r\n        this.name = name;\r\n        this.offsets = new Map<string, number>();\r\n        this.shaderVarsToAttribs = new Map<string, string>();\r\n        this.vertexDataLengths = new Map<string, number>();\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * A helper method that sets this object up for rendering\r\n     *\r\n     * @param shaderVarsToAttributeNames a mapping of shader variable -> vertex\r\n     *                                   attributes in the underlying mesh\r\n     * @param mesh                       the underlying polygon mesh\r\n     */\r\n    public initMeshForRendering(\r\n        shaderVarsToAttributeNames: Map<string, string>\r\n        , mesh: Mesh.PolygonMesh<VertexType>): void {\r\n        let j: number;\r\n\r\n        this.shaderVarsToAttribs = shaderVarsToAttributeNames;\r\n\r\n        switch (mesh.getFaceType()) {\r\n            case Mesh.FaceType.Triangle:\r\n                this.faceType = this.gl.TRIANGLES;\r\n                break;\r\n            case Mesh.FaceType.TriangleFan:\r\n                this.faceType = this.gl.TRIANGLE_FAN;\r\n                break;\r\n            case Mesh.FaceType.TriangleStrip:\r\n                this.faceType = this.gl.TRIANGLE_STRIP;\r\n                break;\r\n            case Mesh.FaceType.Lines:\r\n                this.faceType = this.gl.LINES;\r\n                break;\r\n            case Mesh.FaceType.LineStrip:\r\n                this.faceType = this.gl.LINE_STRIP;\r\n                break;\r\n            case Mesh.FaceType.LineLoop:\r\n                this.faceType = this.gl.LINE_LOOP;\r\n                break;\r\n        }\r\n\r\n        //create buffers\r\n        this.vbo = this.gl.createBuffer();\r\n        this.ibo = this.gl.createBuffer();\r\n\r\n        //get a list of all the vertex attributes from the mesh\r\n        let vertexDataList: VertexType[] = mesh.getVertexAttributes();\r\n        let primitives: number[] = mesh.getIndices();\r\n\r\n\r\n        //get the indices for the mesh into a buffer\r\n        let indicesArray: Uint16Array = new Uint16Array(primitives);\r\n        this.numIndices = indicesArray.length;\r\n\r\n\r\n        /*\r\n        now put all the vertex attributes in a single array, so that we can copy it over to the vertex buffer. When we convert an IVertexData to a bunch of numbers, we must remember where each attribute starts, because we will need to give it to vertexAttribPointer when drawing\r\n        */\r\n\r\n        let floatsPerVertex: number = 0;\r\n\r\n        //for each attribute available in the vertex data:\r\n        for (let [shaderVar, attribName] of this.shaderVarsToAttribs) {\r\n            //the first vertex data will begin at this offset. Required for vertexAttribPointer\r\n            this.offsets.set(attribName, floatsPerVertex);\r\n            //how many floats for this attribute?\r\n            let length: number = vertexDataList[0].getData(attribName).length;\r\n            //update the number of floats by this amount\r\n            floatsPerVertex += length;\r\n            //remember how many floats for this attribute, Required for vertexAttribPointer\r\n            this.vertexDataLengths.set(attribName, length);\r\n        }\r\n\r\n\r\n        if (this.shaderVarsToAttribs.size > 1) //if there are multiple attributes per vertex\r\n            this.stride = floatsPerVertex;\r\n        else\r\n            this.stride = 0;\r\n\r\n        let vertexDataAsNumbers: number[] = [];\r\n        //now generate the array\r\n        vertexDataList.forEach(v => {\r\n            for (let [shaderVar, attribName] of this.shaderVarsToAttribs) {\r\n                let data: number[] = v.getData(attribName);\r\n                //copy over the floats for this attribute\r\n                for (j = 0; j < data.length; j++) {\r\n                    vertexDataAsNumbers.push(data[j]);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n\r\n        //copy all the data to the vbo\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vbo);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertexDataAsNumbers), this.gl.STATIC_DRAW);\r\n\r\n\r\n        //copy over the indices to the ibo\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.ibo);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indicesArray, this.gl.STATIC_DRAW);\r\n    }\r\n\r\n    public cleanup(): void {\r\n        this.gl.deleteBuffer(this.vbo);\r\n        this.gl.deleteBuffer(this.ibo);\r\n    }\r\n\r\n    /**\r\n     * Draw this mesh. This assumes that the object has been setup for rendering prior to calling \r\n     * this method.\r\n     *\r\n     * @param shaderLocations the map of shader locations from the shader program\r\n     */\r\n    public draw(shaderLocations: ShaderLocationsVault): void {\r\n        //bind the buffer for vertex data\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vbo);\r\n        //bind the element buffer for index data\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.ibo);\r\n\r\n        //go through all attributes, use vertexAttribPointer and enable them\r\n        for (let [shaderVar, attribName] of this.shaderVarsToAttribs) {\r\n            /**\r\n             * shaderVar: the name of the shader variable\r\n             * attribName: the name of the corresponding vertex attribute in triangle mesh\r\n             */\r\n\r\n            let shaderLocation: number = shaderLocations.getAttribLocation(shaderVar);\r\n\r\n            if (shaderLocation >= 0) {\r\n\r\n                //tell webgl how to interpret the above data\r\n                this.gl.vertexAttribPointer(\r\n                    shaderLocation //for the attribute that links to this location in shader...\r\n                    , this.vertexDataLengths.get(attribName) //no. of floats per one vertex\r\n                    , this.gl.FLOAT //data in buffer is float-type\r\n                    , false //not normalized, but for FLOAT this parameter has no effect\r\n                    , 4 * this.stride //4 bytes per float\r\n                    , 4 * this.offsets.get(attribName)); //4 bytes per float, beginning here\r\n\r\n                //enable this attribute so that when rendered, this is sent to the vertex shader\r\n                this.gl.enableVertexAttribArray(shaderLocation);\r\n            }\r\n        }\r\n\r\n        //2. execute the \"superpower\" command\r\n        //this effectively reads the index buffer, grabs the vertex data using\r\n        //the indices and sends them to the shader\r\n        this.gl.drawElements(this.faceType, this.numIndices, this.gl.UNSIGNED_SHORT, 0);\r\n    }\r\n\r\n    /*\r\n     *Set the name of this object\r\n     */\r\n    public setName(name: string): void {\r\n        this.name = name;\r\n    }\r\n\r\n    /*\r\n     *Gets the name of this object\r\n    */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n}","import { vec4 } from \"gl-matrix\";\r\n\r\n/**\r\n * This class represents a texture object. It contains not only the texture ID for WebGL, but also the raw pixel data that can be used to manually look up a color.\r\n */\r\n// We are not using texture in this assignment\r\nexport class TextureObject {\r\n    private id: WebGLTexture;\r\n    private data: Uint8ClampedArray;\r\n    private name: string;\r\n    private width: number;\r\n    private height: number;\r\n\r\n    public constructor(gl: WebGLRenderingContext, name: string, textureURL: string) {\r\n        this.name = name;\r\n        this.id = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n\r\n        // Because images have to be download over the internet\r\n        // they might take a moment until they are ready.\r\n        // Until then put a single pixel in the texture so we can\r\n        // use it immediately. When the image has finished downloading\r\n        // we'll update the texture with the contents of the image.\r\n        const level = 0;\r\n        const internalFormat = gl.RGBA;\r\n        const width = 1;\r\n        const height = 1;\r\n        const border = 0;\r\n        const srcFormat = gl.RGBA;\r\n        const srcType = gl.UNSIGNED_BYTE;\r\n        const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\r\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n            width, height, border, srcFormat, srcType,\r\n            pixel);\r\n\r\n        const image = new Image();\r\n        image.src = textureURL;\r\n        image.addEventListener(\"load\", () => {\r\n            gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n                srcFormat, srcType, image);\r\n            gl.generateMipmap(gl.TEXTURE_2D);\r\n\r\n            //capture raw data\r\n            let canvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n            let context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            context.drawImage(image, 0, 0);\r\n            this.data = context.getImageData(0, 0, image.width, image.height).data;\r\n            this.width = canvas.width;\r\n            this.height = canvas.height;\r\n        });\r\n    }\r\n\r\n    public getTextureID(): WebGLTexture {\r\n        return this.id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * Get the color at the given location. The location is assumed to be a texture coordinate. When the location exceeds [0,1], we repeat the texture\r\n     * @param x the x coordinate of the location\r\n     * @param y the y coordinate of the location\r\n     */\r\n    public getColor(x: number, y: number): vec4 {\r\n        let x1: number, y1: number, x2: number, y2: number;\r\n\r\n        x = x - Math.trunc(x); //REPEAT\r\n        y = y - Math.trunc(y); //REPEAT\r\n\r\n        x1 = Math.trunc(x * this.width);\r\n        y1 = Math.trunc(y * this.height);\r\n\r\n        x1 = (x1 + this.width) % this.width;\r\n        y1 = (y1 + this.height) % this.height;\r\n\r\n        x2 = x1 + 1;\r\n        y2 = y1 + 1;\r\n\r\n        if (x2 >= this.width)\r\n            x2 = this.width - 1;\r\n\r\n        if (y2 >= this.height)\r\n            y2 = this.height - 1;\r\n\r\n        let one: vec4 = this.lookup(x1, y1);\r\n        let two: vec4 = this.lookup(x2, y1);\r\n        let three: vec4 = this.lookup(x1, y2);\r\n        let four: vec4 = this.lookup(x2, y2);\r\n\r\n        let inter1: vec4, inter2: vec4, inter3: vec4;\r\n\r\n        inter1 = vec4.lerp(vec4.create(), one, three, y - Math.trunc(y));\r\n        inter2 = vec4.lerp(vec4.create(), two, four, y - Math.trunc(y));\r\n        inter3 = vec4.lerp(vec4.create(), inter1, inter2, x - Math.trunc(x));\r\n\r\n        return inter3;\r\n    }\r\n\r\n    private lookup(x: number, y: number): vec4 {\r\n        return vec4.fromValues(\r\n            this.data[4 * (y * this.width + x)],\r\n            this.data[4 * (y * this.width + x) + 1],\r\n            this.data[4 * (y * this.width + x) + 2],\r\n            this.data[4 * (y * this.width + x) + 3]);\r\n    }\r\n}","import { IVertexData, VertexProducer } from \"%COMMON/IVertexData\";\r\nimport { Scenegraph } from \"./Scenegraph\";\r\nimport { GroupNode } from \"./GroupNode\";\r\nimport { ObjImporter } from \"%COMMON/ObjImporter\";\r\nimport { Mesh } from \"%COMMON/PolygonMesh\";\r\nimport { SGNode } from \"./SGNode\";\r\nimport { TransformNode } from \"./TransformNode\";\r\nimport { mat4, vec3, glMatrix } from \"gl-matrix\";\r\nimport { LeafNode } from \"./LeafNode\";\r\nimport { Material } from \"%COMMON/Material\";\r\nimport { Light } from \"%COMMON/Light\";\r\n\r\nexport namespace ScenegraphJSONImporter {\r\n\r\n    /**\r\n     * This function parses a scenegraph specified in JSON format, and produces a scene graph\r\n     * @param producer the vertex producer to load all the meshes used in the scene graph\r\n     * @param contents the JSON string\r\n     * @return a promise of a scene graph. The caller waits for the promise\r\n     */\r\n    export function importJSON<VertexType extends IVertexData>\r\n        (producer: VertexProducer<VertexType>, contents: string): Promise<Scenegraph<VertexType>> {\r\n        return new Promise<Scenegraph<VertexType>>((resolve, reject) => {\r\n            let jsonTree: Object = JSON.parse(contents);\r\n            let scenegraph = new Scenegraph<VertexType>();\r\n            let root: SGNode;\r\n            let scaleInstances: boolean = true;\r\n\r\n            if (!(\"instances\" in jsonTree)) {\r\n                throw new Error(\"No meshes in the scene graph!\");\r\n            }\r\n            if (\"scaleinstances\" in jsonTree) {\r\n                if (jsonTree[\"scaleinstances\"] == \"false\")\r\n                    scaleInstances = false;\r\n            }\r\n            handleInstances(scenegraph, jsonTree[\"instances\"], scaleInstances, producer)\r\n                .then((scenegraph: Scenegraph<VertexType>) => {\r\n                    if (!(\"root\" in jsonTree)) {\r\n                        throw new Error(\"No root in the scene graph!\");\r\n                    }\r\n                    if (\"images\" in jsonTree) {\r\n                        scenegraph = handleTextures(scenegraph, jsonTree[\"images\"]);\r\n                    }\r\n\r\n                    root = handleNode(scenegraph, jsonTree[\"root\"]);\r\n\r\n                    scenegraph.makeScenegraph(root);\r\n\r\n                    resolve(scenegraph);\r\n                });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    export function handleNode<VertexType extends IVertexData>(scenegraph: Scenegraph<VertexType>, obj: Object): SGNode {\r\n        let result: SGNode = null;\r\n        if (!(\"type\" in obj)) {\r\n            throw new Error(\"No type of node!\");\r\n        }\r\n\r\n        if (\"name\" in obj) {\r\n            console.log(\"Processing: \" + obj[\"name\"]);\r\n        }\r\n        switch (obj[\"type\"]) {\r\n            case \"transform\":\r\n                result = handleTransformNode(scenegraph, obj);\r\n                break;\r\n            case \"group\":\r\n                result = handleGroupNode(scenegraph, obj);\r\n                break;\r\n            case \"object\":\r\n                result = handleLeafNode(scenegraph, obj);\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown node type\");\r\n\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    export function handleTransformNode<VertexType extends IVertexData>(scenegraph: Scenegraph<VertexType>, obj: Object): SGNode {\r\n        let result: TransformNode;\r\n        let nodeName: string = \"t\";\r\n        let transform: mat4 = mat4.create();\r\n\r\n        if (\"name\" in obj) {\r\n            nodeName = obj[\"name\"];\r\n        }\r\n        result = new TransformNode(scenegraph, nodeName);\r\n\r\n        if (!(\"child\" in obj)) {\r\n            throw new Error(\"No child for a transform node\");\r\n        }\r\n\r\n        if (!(\"transform\" in obj)) {\r\n            throw new Error(\"No transform property for a transform node\");\r\n        }\r\n\r\n        for (let op of (Object)(obj[\"transform\"])) {\r\n            if (\"translate\" in op) {\r\n                let values: number[] = convertToArray(op[\"translate\"]);\r\n                if (values.length != 3) {\r\n                    throw new Error(\"3 values needed for translate\")\r\n                }\r\n                let translateBy: vec3 = vec3.fromValues(values[0], values[1], values[2]);\r\n                mat4.translate(transform, transform, translateBy);\r\n            }\r\n            else if (\"scale\" in op) {\r\n                let values: number[] = convertToArray(op[\"scale\"]);\r\n                if (values.length != 3) {\r\n                    throw new Error(\"3 values needed for scale\")\r\n                }\r\n                let scaleBy: vec3 = vec3.fromValues(values[0], values[1], values[2]);\r\n                mat4.scale(transform, transform, scaleBy);\r\n            }\r\n            else if (\"rotate\" in op) {\r\n                let values: number[] = convertToArray(op[\"rotate\"]);\r\n                if (values.length != 4) {\r\n                    throw new Error(\"4 values needed for rotate\")\r\n                }\r\n                let rotateAngle: number = values[0];\r\n                let rotateAxis: vec3 = vec3.fromValues(values[1], values[2], values[3]);\r\n                mat4.rotate(transform, transform, glMatrix.toRadian(rotateAngle), rotateAxis);\r\n            }\r\n        }\r\n        result.addChild(handleNode(scenegraph, obj[\"child\"]));\r\n        result.setTransform(transform);\r\n\r\n        if (\"lights\" in obj) {\r\n            for (let op of (Object)(obj[\"lights\"])) {\r\n                let l: Light = handleLight(op);\r\n                result.addLight(l);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    export function handleLight(obj: Object): Light {\r\n        let l: Light = new Light();\r\n\r\n        if (\"ambient\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"ambient\"]);\r\n            if (values.length != 3) {\r\n                throw new Error(\"3 values needed for ambient\");\r\n            }\r\n            l.setAmbient(values);\r\n        }\r\n\r\n        if (\"diffuse\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"diffuse\"]);\r\n            if (values.length != 3) {\r\n                throw new Error(\"3 values needed for diffuse\");\r\n            }\r\n            l.setDiffuse(values);\r\n        }\r\n\r\n        if (\"specular\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"specular\"]);\r\n            if (values.length != 3) {\r\n                throw new Error(\"3 values needed for specular\");\r\n            }\r\n            l.setSpecular(values);\r\n        }\r\n\r\n        if (\"position\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"position\"]);\r\n            if (values.length != 4) {\r\n                throw new Error(\"4 values needed for position\");\r\n            }\r\n            if (values[3] != 0) {\r\n                l.setPosition(values);\r\n            }\r\n            else {\r\n                l.setDirection(values);\r\n            }\r\n        }\r\n\r\n        if (\"direction\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"direction\"]);\r\n            if (values.length != 3) {\r\n                throw new Error(\"3 values needed for direction\");\r\n            }\r\n            l.setDirection(values);\r\n        }\r\n\r\n        if (\"spotdirection\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"spotdirection\"]);\r\n            if (values.length != 4) {\r\n                throw new Error(\"4 values needed for spot direction\");\r\n            }\r\n            l.setSpotDirection(values);\r\n        }\r\n\r\n        if (\"spotcutoff\" in obj) {\r\n            let value: number = parseFloat(obj[\"spotcutoff\"]);\r\n            l.setSpotAngle(value);\r\n        }\r\n        return l;\r\n    }\r\n\r\n    export function handleMaterial(obj: Object): Material {\r\n        let mat: Material = new Material();\r\n\r\n        if (\"ambient\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"ambient\"]);\r\n            console.log(values);\r\n            if (values.length != 4) {\r\n                throw new Error(\"4 values needed for ambient\");\r\n            }\r\n            mat.setAmbient(values);\r\n        }\r\n\r\n        if (\"diffuse\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"diffuse\"]);\r\n            if (values.length != 4) {\r\n                throw new Error(\"4 values needed for diffuse\");\r\n            }\r\n            mat.setDiffuse(values);\r\n        }\r\n\r\n        if (\"specular\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"specular\"]);\r\n            if (values.length != 4) {\r\n                throw new Error(\"4 values needed for specular\");\r\n            }\r\n            mat.setSpecular(values);\r\n        }\r\n\r\n        if (\"emissive\" in obj) {\r\n            let values: number[] = convertToArray(obj[\"emissive\"]);\r\n            if (values.length != 4) {\r\n                throw new Error(\"4 values needed for emissive\");\r\n            }\r\n            mat.setEmission(values);\r\n        }\r\n\r\n        if (\"shininess\" in obj) {\r\n            let value: number = parseFloat(obj[\"shininess\"]);\r\n            mat.setShininess(value);\r\n        }\r\n\r\n\r\n        if (\"absorption\" in obj) {\r\n            let value: number = parseFloat(obj[\"absorption\"]);\r\n            mat.setAbsorption(value);\r\n        }\r\n\r\n        if (\"reflection\" in obj) {\r\n            let value: number = parseFloat(obj[\"reflection\"]);\r\n            mat.setReflection(value);\r\n        }\r\n\r\n        if (\"transparency\" in obj) {\r\n            let value: number = parseFloat(obj[\"transparency\"]);\r\n            mat.setTransparency(value);\r\n        }\r\n\r\n        if (\"refractive_index\" in obj) {\r\n            let value: number = parseFloat(obj[\"refractive_index\"]);\r\n            mat.setRefractiveIndex(value);\r\n        }\r\n\r\n        return mat;\r\n    }\r\n\r\n\r\n    export function convertToArray(obj: Object): number[] {\r\n        let result: number[] = [];\r\n        for (let n in obj) {\r\n            result.push(parseFloat(obj[n]));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function handleGroupNode<VertexType extends IVertexData>(scenegraph: Scenegraph<VertexType>, obj: Object): SGNode {\r\n        let result: GroupNode;\r\n        let nodeName: string = \"g\";\r\n\r\n        if (\"name\" in obj) {\r\n            nodeName = obj[\"name\"];\r\n        }\r\n        result = new GroupNode(scenegraph, nodeName);\r\n        for (let child of obj[\"children\"]) {\r\n            let node: SGNode = handleNode(scenegraph, child);\r\n            result.addChild(node);\r\n        }\r\n        if (\"lights\" in obj) {\r\n            for (let op of (Object)(obj[\"lights\"])) {\r\n                let l: Light = handleLight(op);\r\n                result.addLight(l);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function handleLeafNode<VertexType extends IVertexData>(scenegraph: Scenegraph<VertexType>, obj: Object): SGNode {\r\n        let result: LeafNode;\r\n\r\n\r\n        let nodeName: string = \"g\";\r\n\r\n        if (\"name\" in obj) {\r\n            nodeName = obj[\"name\"];\r\n        }\r\n        let material: Material = new Material(); //all black by default\r\n        result = new LeafNode(obj[\"instanceof\"], scenegraph, nodeName);\r\n\r\n        if (\"material\" in obj) {\r\n            material = handleMaterial(obj[\"material\"]);\r\n        }\r\n\r\n        result.setMaterial(material);\r\n\r\n        if (\"texture\" in obj) {\r\n            let textureName: string = obj[\"texture\"];\r\n            result.setTextureName(textureName);\r\n        }\r\n        else {\r\n            result.setTextureName(\"white\");\r\n        }\r\n\r\n        if (\"lights\" in obj) {\r\n            for (let op of (Object)(obj[\"lights\"])) {\r\n                let l: Light = handleLight(op);\r\n                result.addLight(l);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    export function handleInstances<VertexType extends IVertexData>(scenegraph: Scenegraph<VertexType>, obj: Object, scaleAndCenter: boolean, producer: VertexProducer<VertexType>): Promise<Scenegraph<VertexType>> {\r\n        return new Promise<Scenegraph<VertexType>>((resolve) => {\r\n            let nameUrls: Map<string, string> = new Map<string, string>();\r\n            for (let n of Object.keys(obj)) {\r\n                let path: string = obj[n][\"path\"];\r\n                nameUrls.set(obj[n][\"name\"], path);\r\n            }\r\n\r\n            //import them\r\n            ObjImporter.batchDownloadMesh(nameUrls, producer, scaleAndCenter)\r\n                .then((meshMap: Map<string, Mesh.PolygonMesh<VertexType>>) => {\r\n                    for (let [n, mesh] of meshMap) {\r\n                        scenegraph.addPolygonMesh(n, mesh);\r\n                    }\r\n                    resolve(scenegraph);\r\n                });\r\n        });\r\n    }\r\n\r\n    export function handleTextures<VertexType extends IVertexData>(scenegraph: Scenegraph<VertexType>, obj: Object): Scenegraph<VertexType> {\r\n        for (let n of Object.keys(obj)) {\r\n            let path: string = obj[n][\"path\"];\r\n            scenegraph.addTexture(obj[n][\"name\"], obj[n][\"path\"]);\r\n        }\r\n        return scenegraph;\r\n    }\r\n}","import { SGNode } from \"SGNode\"\r\nimport { IVertexData } from \"%COMMON/IVertexData\";\r\nimport { Mesh } from \"%COMMON/PolygonMesh\";\r\nimport { ScenegraphRenderer } from \"ScenegraphRenderer\";\r\nimport { mat4, glMatrix, vec3 } from \"gl-matrix\";\r\nimport { Stack } from \"%COMMON/Stack\";\r\nimport { Light } from \"%COMMON/Light\";\r\nimport { Ray } from \"./Ray\";\r\nimport { HitRecord } from \"./HitRecord\";\r\nexport class Scenegraph<VertexType extends IVertexData> {\r\n    /**\r\n     * The root of the scene graph tree\r\n     */\r\n    protected root: SGNode;\r\n\r\n    /**\r\n     * A map to store the (name,mesh) pairs. A map is chosen for efficient search\r\n     */\r\n    protected meshes: Map<string, Mesh.PolygonMesh<VertexType>>;\r\n\r\n    /**\r\n     * A map to store the (name,node) pairs. A map is chosen for efficient search\r\n     */\r\n    protected nodes: Map<string, SGNode>;\r\n\r\n    protected textures: Map<string, string>;\r\n\r\n    /**\r\n     * The associated renderer for this scene graph. This must be set before attempting to\r\n     * render the scene graph\r\n     */\r\n    protected renderer: ScenegraphRenderer;\r\n\r\n\r\n    public constructor() {\r\n        this.root = null;\r\n        this.meshes = new Map<string, Mesh.PolygonMesh<VertexType>>();\r\n        this.nodes = new Map<string, SGNode>();\r\n        this.textures = new Map<string, string>();\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.renderer.dispose();\r\n    }\r\n\r\n    /**\r\n     * Computes and returns the number of lights in this scene graph\r\n     */\r\n\r\n    public getNumLights(): number {\r\n        return this.root.getNumLights();\r\n    }\r\n\r\n    /**\r\n     * Sets the renderer, and then adds all the meshes to the renderer.\r\n     * This function must be called when the scene graph is complete, otherwise not all of its\r\n     * meshes will be known to the renderer\r\n     * @param renderer The {@link ScenegraphRenderer} object that will act as its renderer\r\n     * @throws Exception\r\n     */\r\n    public setRenderer(renderer: ScenegraphRenderer): void {\r\n        this.renderer = renderer;\r\n\r\n        //now add all the meshes\r\n        for (let [meshName, mesh] of this.meshes) {\r\n            this.renderer.addMesh(meshName, mesh);\r\n        }\r\n\r\n        //now add all the textures\r\n        for (let [name, path] of this.textures) {\r\n            this.renderer.addTexture(name, path);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Set the root of the scenegraph, and then pass a reference to this scene graph object\r\n     * to all its node. This will enable any node to call functions of its associated scene graph\r\n     * @param root\r\n     */\r\n    public makeScenegraph(root: SGNode): void {\r\n        this.root = root;\r\n        this.root.setScenegraph(this);\r\n    }\r\n\r\n    /**\r\n     * Draw this scene graph. It delegates this operation to the renderer\r\n     * @param modelView\r\n     */\r\n    public draw(modelView: Stack<mat4>): void {\r\n        if ((this.root != null) && (this.renderer != null)) {\r\n            this.renderer.draw(this.root, modelView);\r\n        }\r\n    }\r\n\r\n    public closest_intersection(ray : Ray, modelview : Stack<mat4>) : HitRecord{\r\n        let hitRecord : HitRecord = new HitRecord(Infinity);\r\n        if ((this.root != null) && (this.renderer != null)) {\r\n            this.root.calculateHitInfo(ray, modelview, hitRecord);\r\n            //console.log(hitRecord.getTime());\r\n        }\r\n        \r\n        return hitRecord;\r\n    }\r\n\r\n    public addPolygonMesh(meshName: string, mesh: Mesh.PolygonMesh<VertexType>): void {\r\n        this.meshes.set(meshName, mesh);\r\n    }\r\n\r\n\r\n    public animate(time: number): void {\r\n        /*    let transform: mat4 = mat4.create();\r\n            mat4.rotate(transform, transform, glMatrix.toRadian(time), vec3.fromValues(0, 1, 0));\r\n            this.nodes.get(\"box-transform\").setAnimationTransform(transform);\r\n    \r\n            transform = mat4.create();\r\n            mat4.rotate(transform, transform, glMatrix.toRadian(30), vec3.fromValues(1, 0, 0));\r\n            mat4.rotate(transform, transform, glMatrix.toRadian(-10 * time), vec3.fromValues(0, 1, 0));\r\n            mat4.translate(transform, transform, vec3.fromValues(100, 0, 0));\r\n            this.nodes.get(\"aeroplane-transform\").setAnimationTransform(transform);\r\n            */\r\n\r\n        /*   let transform: mat4 = mat4.create();\r\n           mat4.rotate(transform, transform, glMatrix.toRadian(45 * Math.sin(0.1 * time)), vec3.fromValues(1, 0, 0));\r\n           this.nodes.get(\"face\").setAnimationTransform(transform);\r\n   \r\n           transform = mat4.create();\r\n           mat4.translate(transform, transform, vec3.fromValues(0, 12 + 12 * Math.sin(0.2 * time), 0));\r\n           this.nodes.get(\"hat\").setAnimationTransform(transform);\r\n   */\r\n    }\r\n\r\n    public addNode(nodeName: string, node: SGNode): void {\r\n        this.nodes.set(nodeName, node);\r\n    }\r\n\r\n    public getRoot(): SGNode {\r\n        return this.root;\r\n    }\r\n\r\n    public getPolygonMeshes(): Map<string, Mesh.PolygonMesh<VertexType>> {\r\n        return this.meshes;\r\n    }\r\n\r\n    public getNodes(): Map<string, SGNode> {\r\n        return this.nodes;\r\n    }\r\n\r\n    public addTexture(textureName: string, path: string): void {\r\n        this.textures.set(textureName, path);\r\n    }\r\n}","import { vec2, vec3,vec4 } from \"gl-matrix\";\r\nimport { Material } from \"%COMMON/Material\";\r\n\r\nexport class HitRecord {\r\n    protected t : number;\r\n    protected intersectionPoint : vec4;\r\n    protected normal : vec4;\r\n    protected materials : Material;\r\n    protected textCoord : vec2;\r\n    protected textureName : string;\r\n\r\n    public constructor(t : number) {//, intersection : vec3, normal : vec3, materials : Material, textCoord : vec2, textureName : string) {\r\n        this.t = t;\r\n        /*\r\n        this.intersectionPoint = intersection;\r\n        this.normal = normal;\r\n        this.materials = materials;\r\n        this.textCoord = textCoord;\r\n        this.textureName = textureName;\r\n        */\r\n    }\r\n    public setTime(time : number) : void {\r\n        this.t = time;\r\n    }\r\n\r\n    public setIntersectionPoint(intersection : vec4) : void {\r\n        this.intersectionPoint = intersection;\r\n    }\r\n\r\n    public setNormal( normal : vec4) : void {\r\n        this.intersectionPoint = normal;\r\n    }\r\n\r\n    public setMaterials(materials : Material): void {\r\n        this.materials = materials;\r\n    }\r\n    \r\n    public getTime() : number {\r\n        return this.t;\r\n    }\r\n\r\n}","import { SGNode } from \"./SGNode\"\r\nimport { Scenegraph } from \"./Scenegraph\";\r\nimport { ScenegraphRenderer } from \"./ScenegraphRenderer\";\r\nimport { Stack } from \"%COMMON/Stack\";\r\nimport { mat4, vec4, vec3 } from \"gl-matrix\";\r\nimport { IVertexData } from \"%COMMON/IVertexData\";\r\nimport { Light } from \"%COMMON/Light\";\r\nimport { HitRecord } from \"./HitRecord\";\r\nimport {Ray} from \"./Ray\";\r\n\r\n/**\r\n * This class represents a group node in the scenegraph. A group node is simply a logical grouping\r\n * of other nodes. It can have an arbitrary number of children. Its children can be nodes of any type\r\n * @author Amit Shesh\r\n */\r\n\r\nexport class GroupNode extends SGNode {\r\n\r\n    /**\r\n     * A list of its children\r\n     */\r\n    protected children: SGNode[];\r\n\r\n    public constructor(graph: Scenegraph<IVertexData>, name: string) {\r\n        super(graph, name);\r\n        this.children = [];\r\n    }\r\n\r\n    /**\r\n     * Searches recursively into its subtree to look for node with specified name.\r\n     * @param name name of node to be searched\r\n     * @return the node whose name this is if it exists within this subtree, null otherwise\r\n     */\r\n    public getNode(name: string): SGNode {\r\n        let n: SGNode = super.getNode(name);\r\n        if (n != null) {\r\n            return n;\r\n        }\r\n\r\n        let i: number = 0;\r\n        let answer: SGNode = null;\r\n\r\n        while ((i < this.children.length) && (answer == null)) {\r\n            answer = this.children[i].getNode(name);\r\n            i++;\r\n        }\r\n        return answer;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference to the scene graph object for this node, and then recurses down\r\n     * to children for the same\r\n     * @param graph a reference to the scenegraph object of which this tree is a part\r\n     */\r\n    public setScenegraph(graph: Scenegraph<IVertexData>): void {\r\n        super.setScenegraph(graph);\r\n        this.children.forEach(child => child.setScenegraph(graph));\r\n    }\r\n\r\n    /**\r\n     * To draw this node, it simply delegates to all its children\r\n     * @param context the generic renderer context {@link ScenegraphRenderer}\r\n     * @param modelView the stack of modelview matrices\r\n     */\r\n    public draw(context: ScenegraphRenderer, modelView: Stack<mat4>): void {\r\n        this.children.forEach(child => child.draw(context, modelView));\r\n    }\r\n\r\n    public calculateHitInfo(ray : Ray, modelview : Stack<mat4>, hitRecord : HitRecord) : void{\r\n        this.children.forEach(child => child.calculateHitInfo(ray,modelview,hitRecord));\r\n    }\r\n\r\n    /**\r\n     * Makes a deep copy of the subtree rooted at this node\r\n     * @return a deep copy of the subtree rooted at this node\r\n     */\r\n    public clone(): SGNode {\r\n        let newc: SGNode[] = [];\r\n\r\n        this.children.forEach(child => newc.push(child.clone()));\r\n\r\n        let newgroup: GroupNode = new GroupNode(this.scenegraph, name);\r\n\r\n        this.children.forEach(child => newgroup.addChild(child));\r\n        return newgroup;\r\n    }\r\n\r\n    /**\r\n     * Since a group node is capable of having children, this method overrides the default one\r\n     * in {@link sgraph.AbstractNode} and adds a child to this node\r\n     * @param child\r\n     * @throws IllegalArgumentException this class does not throw this exception\r\n     */\r\n    public addChild(child: SGNode): void {\r\n        this.children.push(child);\r\n        child.setParent(this);\r\n    }\r\n\r\n    /**\r\n     * Get a list of all its children, for convenience purposes\r\n     * @return a list of all its children\r\n     */\r\n\r\n    public getChildren(): SGNode[] {\r\n        return this.children;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of lights in the scene graph rooted at this node\r\n     */\r\n    public getNumLights(): number {\r\n        let numLights: number = super.getNumLights();\r\n\r\n        this.children.forEach((node: SGNode) => {\r\n            numLights += node.getNumLights();\r\n        });\r\n        return numLights;\r\n    }\r\n\r\n    public getLights(modelview: Stack<mat4>): Light[] {\r\n        let lights: Light[] = super.getLights(modelview);\r\n        //now get all the lights in children\r\n        this.children.forEach((node: SGNode) => {\r\n            let l: Light[] = node.getLights(modelview);\r\n            l.forEach((lgt: Light) => lights.push(lgt));\r\n        });\r\n        return lights;\r\n    }\r\n}\r\n","\r\nimport { IVertexData, VertexProducer } from \"./IVertexData\";\r\nimport { Mesh } from \"./PolygonMesh\"\r\nimport { vec3, vec4 } from \"gl-matrix\";\r\n\r\n/**\r\n * This file contains useful functions to import a mesh in the OBJ file format.\r\n */\r\n\r\nexport namespace ObjImporter {\r\n    /**\r\n     * Download a mesh stored in the OBJ file format. \r\n     * @param name the name of the mesh\r\n     * @param producer a producer for vertices to store data\r\n     * @param scaleAndCenter boolean function about whether to scale and center the model so that it occupies a cube of unit side centered at the origin\r\n     * @return promise that can be waited on\r\n     */\r\n    /*   export function downloadMesh<VertexType extends IVertexData>(name: string, producer: VertexProducer<VertexType>): Promise<Mesh.PolygonMesh<VertexType>> {\r\n           return new Promise<Mesh.PolygonMesh<VertexType>>((resolve) => {\r\n               let promise: Promise<Mesh.PolygonMesh<IVertexData>>;\r\n               let mesh: Mesh.PolygonMesh<VertexType>;\r\n   \r\n               promise = fetch(name) //fetch the data from this name treating it as a URL\r\n                   .then(response => response.text()) //get the contents as text\r\n                   .then(data => {\r\n                       mesh = importMesh<VertexType>(producer, data, true); //import mesh\r\n                       return mesh; //return the loaded mesh\r\n                   });\r\n   \r\n               //when promise is resolved, then call the callback with the mesh\r\n               Promise.resolve(promise).then((mesh: Mesh.PolygonMesh<VertexType>) => {\r\n                   resolve(mesh);\r\n               });\r\n           });\r\n       } */\r\n\r\n    export function downloadMesh<VertexType extends IVertexData>(name: string, producer: VertexProducer<VertexType>, scaleAndCenter: boolean = true): Promise<Mesh.PolygonMesh<VertexType>> {\r\n        return new Promise<Mesh.PolygonMesh<VertexType>>((resolve) => {\r\n            let promise: Promise<Mesh.PolygonMesh<IVertexData>>;\r\n            let mesh: Mesh.PolygonMesh<VertexType>;\r\n\r\n            promise = fetch(name) //fetch the data from this name treating it as a URL\r\n                .then(response => response.text()) //get the contents as text\r\n                .then(data => {\r\n                    mesh = importMesh<VertexType>(producer, data, scaleAndCenter); //import mesh\r\n                    return mesh; //return the loaded mesh\r\n                });\r\n\r\n            //when promise is resolved, then call the callback with the mesh\r\n            Promise.resolve(promise).then((mesh: Mesh.PolygonMesh<VertexType>) => {\r\n                resolve(mesh);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This function allows the user to download several polygon meshes, all stored in the OBJ file format. This is a batch-version of the above function.\r\n     * @param nameAndUrl a map of mesh names to URLs (paths) \r\n     * @param producer an object to produce vertices.\r\n     * @param scaleAndCenter boolean function about whether to scale and center the model so that it occupies a cube of unit side centered at the origin\r\n     * @return a promise \r\n     */\r\n    export function batchDownloadMesh<VertexType extends IVertexData>(nameAndUrl: Map<string, string>, producer: VertexProducer<VertexType>, scaleAndCenter: boolean = true): Promise<Map<string, Mesh.PolygonMesh<VertexType>>> {\r\n        return new Promise<Map<string, Mesh.PolygonMesh<VertexType>>>((resolve) => {\r\n            let promises: Promise<[string, Mesh.PolygonMesh<VertexType>]>[] = [];\r\n            let meshMap: Map<string, Mesh.PolygonMesh<VertexType>> = new Map<string, Mesh.PolygonMesh<VertexType>>();\r\n\r\n            for (let [n, u] of nameAndUrl) { //n:name, u: URL\r\n                //create one promise per mesh\r\n                promises.push(fetch(u) //fetch the URL\r\n                    .then(response => response.text()) //convert contents to string\r\n                    .then(data => {\r\n                        let mesh: Mesh.PolygonMesh<VertexType> = importMesh<VertexType>(producer, data, scaleAndCenter); //import the mesh\r\n                        return [n, mesh]; //report a name, mesh pair\r\n                    }));\r\n            }\r\n\r\n            //when all promises have been resolved (i.e. when all meshes have been loaded)\r\n            Promise.all(promises).then((list) => {\r\n                for (let [n, mesh] of list) { //for each (name,mesh) pair in the list\r\n                    meshMap.set(n, mesh); //add to the mesh map\r\n                }\r\n                resolve(meshMap); //call the callback with the map of meshes\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * This function parses an OBJ format to import a polygonal mesh\r\n     * @param producer an object used to produce vertices\r\n     * @param contents the contents in OBJ format\r\n     * @param scaleAndCenter whether to scale and center the loaded mesh so that it is centered at the origin and inside a box of side 1\r\n     */\r\n    export function importMesh<VertexType extends IVertexData>\r\n        (producer: VertexProducer<VertexType>, contents: string, scaleAndCenter: boolean): Mesh.PolygonMesh<VertexType> {\r\n\r\n        //helper class\r\n        class IndexTriple {\r\n            vertexIndex: number; //index into the vertex array\r\n            textureIndex: number; //index into the texture array\r\n            normalIndex: number; //index into the normals array\r\n\r\n            constructor(vIndex: number, tIndex: number, nIndex: number) {\r\n                this.vertexIndex = vIndex;\r\n                this.textureIndex = tIndex;\r\n                this.normalIndex = nIndex;\r\n            }\r\n\r\n            /**\r\n             * Generate a hash function that is unique to each triple\r\n             */\r\n            hash(): string {\r\n                return \"\" + this.vertexIndex + \",\" + this.textureIndex + \",\" + this.normalIndex;\r\n            }\r\n        }\r\n\r\n        let mesh: Mesh.PolygonMesh<VertexType>;\r\n        let vertices: vec4[];\r\n        let normals: vec4[];\r\n        let texcoords: vec4[];\r\n        let indexData: IndexTriple[];\r\n        let vertexData: VertexType[];\r\n        let meshIndices: number[]\r\n\r\n        let i: number;\r\n        let j: number;\r\n        let lineno: number;\r\n\r\n        //stores (index_v+index_n+index_t -> index in vertexData)\r\n        let unpacked: Map<string, number> = new Map<string, number>();\r\n\r\n        vertices = [];\r\n        normals = [];\r\n        texcoords = [];\r\n        meshIndices = [];\r\n        vertexData = [];\r\n        indexData = [];\r\n\r\n\r\n        //split into lines\r\n        let lines: string[] = contents.split(/\\r?\\n/);\r\n        lineno = 0;\r\n\r\n        //for each line\r\n        lines.forEach(line => {\r\n            line = line.trim(); //remove whitespace\r\n            lineno++; //increment line number\r\n            if ((line.length > 0) && (!line.startsWith(\"#\"))) { //it is a non-empty, non-comment line\r\n\r\n                let tokens: string[] = line.split(/\\s+/); //split by white space\r\n                switch (tokens[0]) {\r\n                    case \"v\": { //it is vertex data\r\n                        if ((tokens.length < 4) || (tokens.length > 7))\r\n                            throw new Error(\"Line \" + lineno + \": Vertex coordinate has an invalid number of values\");\r\n                        let v: vec4 = vec4.create();\r\n                        v[0] = parseFloat(tokens[1]);\r\n                        v[1] = parseFloat(tokens[2]);\r\n                        v[2] = parseFloat(tokens[3]);\r\n                        v[3] = 1.0;\r\n\r\n                        if (tokens.length == 5) { //homogeneous coordinate present\r\n                            let num: number = parseFloat(tokens[4]);\r\n                            if (num != 0) {\r\n                                v[0] /= num;\r\n                                v[1] /= num;\r\n                                v[2] /= num;\r\n                            }\r\n                        }\r\n\r\n                        vertices.push(v);\r\n                    }\r\n                        break;\r\n                    case \"vn\": {  //it is a normal vector\r\n                        if (tokens.length != 4)\r\n                            throw new Error(\"Line \" + lineno + \": Normal has an invalid number of values\");\r\n\r\n                        let v: vec3 = vec3.create();\r\n\r\n                        v[0] = parseFloat(tokens[1]);\r\n                        v[1] = parseFloat(tokens[2]);\r\n                        v[2] = parseFloat(tokens[3]);\r\n\r\n                        vec3.normalize(v, v); //normalize the vector\r\n                        normals.push(vec4.fromValues(v[0], v[1], v[2], 0));\r\n                    }\r\n                        break;\r\n                    case \"vt\": { //it is a texture coordinate\r\n                        if ((tokens.length < 3) || (tokens.length > 4))\r\n                            throw new Error(\"Line \" + lineno + \": Texture coordinate has an invalid number of values\");\r\n                        let v: vec4 = vec4.create();\r\n\r\n                        v[0] = parseFloat(tokens[1]);\r\n                        v[1] = parseFloat(tokens[2]);\r\n                        v[2] = 0;\r\n                        v[3] = 1;\r\n\r\n                        if (tokens.length > 3) {\r\n                            v[2] = parseFloat(tokens[3]);\r\n                        }\r\n                        texcoords.push(v);\r\n                    }\r\n                        break;\r\n                    case \"f\": {  //this is face data\r\n                        if (tokens.length < 4)\r\n                            throw new Error(\"Line \" + lineno + \": Face has too few vertices, must be at least 3\");\r\n\r\n                        tokens.shift(); //remove tokens[0] which is 'f'\r\n                        tokens = triangulate(tokens); //if there are >3 sets, triangulate\r\n                        for (i = 0; i < tokens.length; i++) {\r\n                            let data: string[] = tokens[i].split(\"/\"); //split by /\r\n                            if ((data.length < 1) && (data.length > 3))\r\n                                throw new Error(\"Line \" + lineno + \": Face specification has an incorrect number of values\");\r\n\r\n                            //in OBJ file format all indices begin at 1, so must subtract 1 here\r\n                            let vertIndex: number = parseInt(data[0]) - 1;\r\n                            let textureIndex: number = -1;\r\n                            let normalIndex: number = -1;\r\n                            if (data.length > 1) {\r\n                                if (data[1].length > 0) { //a vertex texture index exists\r\n                                    textureIndex = parseInt(data[1]) - 1;\r\n                                }\r\n                                if (data.length > 2) { //a vertex normal index exists\r\n                                    normalIndex = parseInt(data[2]) - 1;\r\n                                }\r\n                            }\r\n                            indexData.push(new IndexTriple(vertIndex, textureIndex, normalIndex));\r\n                        }\r\n                    }\r\n                        break;\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        let normalsPresent: boolean = false;\r\n        let texturePresent: boolean = false;\r\n\r\n        if (normals.length > 0) {\r\n            normalsPresent = true; //content had normals\r\n        }\r\n\r\n        if (texcoords.length > 0) {\r\n            texturePresent = true; //content had texture coordinates\r\n        }\r\n\r\n        //now make the list of vertices and indices\r\n        indexData.forEach(v => {\r\n            //get the hash\r\n            let hashValue: string = v.hash();\r\n            let actualIndex: number = -1;\r\n            if (hashValue in unpacked) {\r\n                //get the index\r\n                actualIndex = unpacked.get(hashValue);\r\n            }\r\n            else { //not present, make a new vertex\r\n                let vertex: VertexType = producer.produce();\r\n\r\n                vertex.setData(\"position\", [vertices[v.vertexIndex][0], vertices[v.vertexIndex][1], vertices[v.vertexIndex][2]]);\r\n\r\n                if (normalsPresent) {\r\n                    vertex.setData(\"normal\", [normals[v.normalIndex][0], normals[v.normalIndex][1], normals[v.normalIndex][2]]);\r\n                }\r\n\r\n                if (texturePresent) {\r\n                    vertex.setData(\"texcoord\", [texcoords[v.textureIndex][0], texcoords[v.textureIndex][1], texcoords[v.textureIndex][2]]);\r\n                }\r\n                //push into vertexData\r\n                vertexData.push(vertex);\r\n                //remember in hash table\r\n                unpacked.set(hashValue, vertexData.length - 1);\r\n                actualIndex = vertexData.length - 1;\r\n            }\r\n            //push the index\r\n            meshIndices.push(actualIndex);\r\n        });\r\n\r\n        mesh = new Mesh.PolygonMesh<VertexType>();\r\n        mesh.setVertexData(vertexData);\r\n        mesh.setPrimitives(meshIndices, Mesh.FaceType.Triangle);\r\n        if (scaleAndCenter) {\r\n            let scaledMesh: Mesh.DecoratedMesh<VertexType> = new Mesh.CanonicalMesh<VertexType>(mesh);\r\n            mesh = scaledMesh.getMesh();\r\n        }\r\n\r\n        return mesh;\r\n\r\n    }\r\n\r\n    function triangulate(faceData: string[]): string[] {\r\n        let result: string[] = [];\r\n        if (faceData.length <= 3) {\r\n            result = faceData;\r\n        }\r\n        else {\r\n            for (let i: number = 1; i < faceData.length - 1; i++) {\r\n                result.push(faceData[0]);\r\n                result.push(faceData[i]);\r\n                result.push(faceData[i + 1]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","import { SGNode } from \"./SGNode\"\r\nimport { mat4 } from \"gl-matrix\";\r\nimport { Scenegraph } from \"./Scenegraph\";\r\nimport { Stack } from \"%COMMON/Stack\";\r\nimport { ScenegraphRenderer } from \"./ScenegraphRenderer\";\r\nimport { IVertexData } from \"%COMMON/IVertexData\";\r\nimport { Light } from \"%COMMON/Light\";\r\nimport { Ray } from \"Ray\";\r\nimport { HitRecord } from \"HitRecord\";\r\n\r\n/**\r\n * This node represents a transformation in the scene graph. It has only one child. The \r\n * transformation can be viewed as changing from its child's coordinate system to its parent's \r\n * coordinate system. This also stores an animation transform that can be tweaked at runtime\r\n * @author Amit Shesh\r\n */\r\nexport class TransformNode extends SGNode {\r\n    /**\r\n         * Matrices storing the static and animation transformations separately, so that they can be\r\n         * changed separately\r\n         */\r\n    protected transform: mat4;\r\n    protected animationTransform: mat4;\r\n\r\n    /**\r\n     * A reference to its only child\r\n     */\r\n    protected child: SGNode;\r\n\r\n    public constructor(graph: Scenegraph<IVertexData>, name: string) {\r\n        super(graph, name);\r\n        this.transform = mat4.create();\r\n        this.animationTransform = mat4.create();\r\n        this.child = null;\r\n    }\r\n\r\n    public getLights(modelview: Stack<mat4>): Light[] {\r\n        modelview.push(mat4.clone(modelview.peek()));\r\n        mat4.multiply(modelview.peek(), modelview.peek(), this.animationTransform);\r\n        mat4.multiply(modelview.peek(), modelview.peek(), this.transform);\r\n\r\n        let lights: Light[] = super.getLights(modelview);\r\n        if (this.child != null) {\r\n            let childLights: Light[] = this.child.getLights(modelview);\r\n            childLights.forEach((l: Light) => lights.push(l));\r\n        }\r\n        modelview.pop();\r\n        return lights;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of lights in the scene graph rooted at this node\r\n     */\r\n    public getNumLights(): number {\r\n        return super.getNumLights() + this.child.getNumLights();\r\n    }\r\n\r\n    /**\r\n     * Creates a deep copy of the subtree rooted at this node\r\n     * @return a deep copy of the subtree rooted at this node\r\n     */\r\n    public clone(): SGNode {\r\n        let newchild: SGNode;\r\n\r\n        if (this.child != null) {\r\n            newchild = this.child.clone();\r\n        }\r\n        else {\r\n            newchild = null;\r\n        }\r\n\r\n        let newtransform: TransformNode = new TransformNode(this.scenegraph, this.name);\r\n        newtransform.setTransform(this.transform);\r\n        newtransform.setAnimationTransform(this.animationTransform);\r\n\r\n        if (newchild != null) {\r\n            try {\r\n                newtransform.addChild(newchild);\r\n            }\r\n            catch (e) {\r\n\r\n            }\r\n        }\r\n        return newtransform;\r\n    }\r\n\r\n    /**\r\n     * Determines if this node has the specified name and returns itself if so. Otherwise it recurses\r\n     * into its only child\r\n     * @param name name of node to be searched\r\n     * @return\r\n     */\r\n    public getNode(name: string): SGNode {\r\n        let n: SGNode = super.getNode(name);\r\n        if (n != null)\r\n            return n;\r\n\r\n        if (this.child != null) {\r\n            return this.child.getNode(name);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Since this node can have a child, it override this method and adds the child to itself\r\n     * This will overwrite any children set for this node previously.\r\n     * @param child the child of this node\r\n     * @throws IllegalArgumentException this method does not throw this exception\r\n     */\r\n    public addChild(child: SGNode): void {\r\n        if (this.child != null)\r\n            throw new Error(\"Transform node already has a child\");\r\n        this.child = child;\r\n        this.child.setParent(this);\r\n    }\r\n\r\n    /**\r\n     * Draws the scene graph rooted at this node\r\n     * After preserving the current top of the modelview stack, this \"post-multiplies\" its\r\n     * animation transform and then its transform in that order to the top of the model view\r\n     * stack, and then recurses to its child. When the child is drawn, it restores the modelview\r\n     * matrix\r\n     * @param context the generic renderer context {@link sgraph.IScenegraphRenderer}\r\n     * @param modelView the stack of modelview matrices\r\n     */\r\n\r\n    public draw(context: ScenegraphRenderer, modelView: Stack<mat4>) {\r\n        modelView.push(mat4.clone(modelView.peek()));\r\n        mat4.multiply(modelView.peek(), modelView.peek(), this.animationTransform);\r\n        mat4.multiply(modelView.peek(), modelView.peek(), this.transform);\r\n\r\n        if (this.child != null)\r\n            this.child.draw(context, modelView);\r\n        modelView.pop();\r\n    }\r\n\r\n    public calculateHitInfo(ray : Ray, modelview : Stack<mat4>, hitRecord : HitRecord) : void{\r\n        modelview.push(mat4.clone(modelview.peek()));\r\n\r\n        mat4.multiply(modelview.peek(), modelview.peek(), this.animationTransform);\r\n        mat4.multiply(modelview.peek(), modelview.peek(), this.transform);\r\n\r\n        if(this.child != null) {\r\n            this.child.calculateHitInfo(ray, modelview, hitRecord);\r\n        }\r\n        modelview.pop();\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the animation transform of this node\r\n     * @param mat the animation transform of this node\r\n     */\r\n    public setAnimationTransform(mat: mat4): void {\r\n        this.animationTransform = mat;\r\n    }\r\n\r\n    /**\r\n     * Gets the transform at this node (not the animation transform)\r\n     * @return\r\n     */\r\n    public getTransform(): mat4 {\r\n        return this.transform;\r\n    }\r\n\r\n    /**\r\n     * Sets the transformation of this node\r\n     * @param t\r\n     * @throws IllegalArgumentException\r\n     */\r\n    public setTransform(t: mat4): void {\r\n        this.transform = mat4.clone(t);\r\n    }\r\n\r\n    /**\r\n     * Gets the animation transform of this node\r\n     * @return\r\n     */\r\n    public getAnimationTransform(): mat4 {\r\n        return this.animationTransform;\r\n    }\r\n\r\n    /**\r\n     * Sets the scene graph object of which this node is a part, and then recurses to its child\r\n     * @param graph a reference to the scenegraph object of which this tree is a part\r\n     */\r\n    public setScenegraph(graph: Scenegraph<IVertexData>): void {\r\n        super.setScenegraph(graph);\r\n        if (this.child != null) {\r\n            this.child.setScenegraph(graph);\r\n        }\r\n    }\r\n}","import { SGNode } from \"./SGNode\"\r\nimport { Scenegraph } from \"./Scenegraph\";\r\nimport { Material } from \"%COMMON/Material\";\r\nimport { Stack } from \"%COMMON/Stack\";\r\nimport { ScenegraphRenderer } from \"./ScenegraphRenderer\";\r\nimport { vec4, mat4 , vec3} from \"gl-matrix\";\r\nimport { IVertexData } from \"%COMMON/IVertexData\";\r\nimport { HitRecord } from \"./HitRecord\";\r\nimport {Ray} from \"./Ray\";\r\n\r\n/**\r\n * This node represents the leaf of a scene graph. It is the only type of node that has\r\n * actual geometry to render.\r\n * @author Amit Shesh\r\n */\r\n\r\nexport class LeafNode extends SGNode {\r\n\r\n    /**\r\n      * The name of the object instance that this leaf contains. All object instances are stored\r\n      * in the scene graph itself, so that an instance can be reused in several leaves\r\n      */\r\n    protected meshName: string;\r\n    /**\r\n     * The material associated with the object instance at this leaf\r\n     */\r\n    protected material: Material;\r\n\r\n    protected textureName: string;\r\n\r\n    public constructor(instanceOf: string, graph: Scenegraph<IVertexData>, name: string) {\r\n        super(graph, name);\r\n        this.meshName = instanceOf;\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\t *Set the material of each vertex in this object\r\n\t */\r\n    public setMaterial(mat: Material): void {\r\n        this.material = mat;\r\n    }\r\n\r\n    /**\r\n     * Set texture ID of the texture to be used for this leaf\r\n     * @param name\r\n     */\r\n    public setTextureName(name: string): void {\r\n        this.textureName = name;\r\n    }\r\n\r\n    /*\r\n     * gets the material\r\n     */\r\n    public getMaterial(): Material {\r\n        return this.material;\r\n    }\r\n\r\n    public clone(): SGNode {\r\n        let newclone: SGNode = new LeafNode(this.meshName, this.scenegraph, this.name);\r\n        newclone.setMaterial(this.getMaterial());\r\n        return newclone;\r\n    }\r\n\r\n\r\n    /**\r\n     * Delegates to the scene graph for rendering. This has two advantages:\r\n     * <ul>\r\n     *     <li>It keeps the leaf light.</li>\r\n     *     <li>It abstracts the actual drawing to the specific implementation of the scene graph renderer</li>\r\n     * </ul>\r\n     * @param context the generic renderer context {@link sgraph.IScenegraphRenderer}\r\n     * @param modelView the stack of modelview matrices\r\n     * @throws IllegalArgumentException\r\n     */\r\n    public draw(context: ScenegraphRenderer, modelView: Stack<mat4>): void {\r\n        if (this.meshName.length > 0) {\r\n            context.drawMesh(this.meshName, this.material, this.textureName, modelView.peek());\r\n        }\r\n    }\r\n\r\n    public calculateHitInfo(ray : Ray, modelview : Stack<mat4>, hitRecord : HitRecord) : void{\r\n        if (this.meshName.length > 0) {\r\n            if(this.meshName == \"sphere\") {\r\n                this.calculateHitInfoSphere(ray, modelview, hitRecord);\r\n            }\r\n            if(this.meshName == \"box\") {\r\n                this.calculateHitInfoBox(ray, modelview, hitRecord);\r\n            }\r\n        }\r\n    }\r\n\r\n    public calculateHitInfoSphere(ray : Ray, modelview : Stack<mat4>, hitRecord : HitRecord) : void{\r\n        //console.log(ray.getDirection()[0], ray.getDirection()[1], ray.getDirection()[2]);\r\n        let transformation : mat4 = modelview.peek();\r\n        //console.log(ray.getDirection());\r\n        let rayPos : vec4= vec4.fromValues(ray.getStartPoint()[0],ray.getStartPoint()[1],ray.getStartPoint()[2], 1);\r\n        let rayDir : vec4 = vec4.fromValues(ray.getDirection()[0],ray.getDirection()[1],ray.getDirection()[2], 1);\r\n        let translation  : vec3 = vec3.create();\r\n        mat4.getTranslation(translation,transformation);\r\n        vec4.transformMat4(rayPos, rayPos, transformation);\r\n        //vec4.transformMat4(rayDir, rayDir, transformation);\r\n        //console.log(rayDir[0], rayDir[1],rayDir[2], rayDir[3]);\r\n        //console.log(rayPos[0], rayPos[1],rayPos[2], rayPos[3]);\r\n        let scale : vec3 = vec3.create();\r\n        mat4.getScaling(scale, transformation);\r\n        //console.log(scale);\r\n        let v : vec4 = rayDir;\r\n        let s : vec4 = rayPos;\r\n        let v_x : number = v[0];\r\n        let v_y : number = v[1];\r\n        let v_z : number = v[2];\r\n        let s_x : number = s[0];\r\n        let s_y : number = s[1];\r\n        let s_z : number = s[2];\r\n        let r : number = scale[0];\r\n        let A : number = Math.pow(v_x, 2) + Math.pow(v_y , 2) + Math.pow(v_z, 2);\r\n        let B : number = 2 * (v_x* (s_x - r) + v_y * (s_y - r)+ v_z * (s_z - r));\r\n        let C : number = Math.pow(s_x, 2) + Math.pow(s_y , 2) + Math.pow(s_z, 2) - Math.pow(r, 2);\r\n        //console.log(A,B,C);\r\n\r\n        let currentShortestTime : number = Infinity;\r\n        let t1 : number = (-B + Math.sqrt(Math.pow(B, 2) - 4 * A * C)) / (2 * A);\r\n        let t2 : number = (-B - Math.sqrt(Math.pow(B, 2) - 4 * A * C)) / (2 * A);\r\n        //console.log((Math.pow(B, 2) - 4 * A * C));\r\n        //console.log(t1,t2);\r\n        if(t1 >= 0) {\r\n            currentShortestTime = t1;\r\n        }\r\n        if(t2 >= 0) {\r\n            if(t2 < t1) {\r\n                currentShortestTime = t2;\r\n            }\r\n        }\r\n\r\n        let recordShortestTime : number = hitRecord.getTime();\r\n        if(currentShortestTime < recordShortestTime) {\r\n            //Update everything.\r\n            hitRecord.setTime(currentShortestTime);\r\n            let intersection : vec4 = vec4.create();\r\n            let distance : vec4 = vec4.create();\r\n            vec4.scale(distance, rayDir, currentShortestTime);\r\n            vec4.add(intersection, rayPos, distance);\r\n            hitRecord.setIntersectionPoint(intersection);\r\n            //console.log(translation[0],translation[1],translation[2]);\r\n            //console.log(currentShortestTime, intersection[0],intersection[1],intersection[2])\r\n           //console.log(hitRecord.getTime());\r\n           //console.log(rayPos[0],rayPos[1],rayPos[2]);\r\n        }\r\n        //console.log(rayPos[0],rayPos[1],rayPos[2]);\r\n\r\n    }\r\n\r\n    public calculateHitInfoBox(ray : Ray, modelview : Stack<mat4>, hitRecord : HitRecord) : void{\r\n        //console.log(ray.getDirection()[0], ray.getDirection()[1], ray.getDirection()[2]);\r\n        let transformation : mat4 = modelview.peek();\r\n        //console.log(ray.getDirection());\r\n        let rayPos : vec4= vec4.fromValues(ray.getStartPoint()[0],ray.getStartPoint()[1],ray.getStartPoint()[2], 1);\r\n        let rayDir : vec4 = vec4.fromValues(ray.getDirection()[0],ray.getDirection()[1],ray.getDirection()[2], 1);\r\n        let translation  : vec3 = vec3.create();\r\n        mat4.getTranslation(translation,transformation);\r\n        vec4.transformMat4(rayPos, rayPos, transformation);\r\n        //vec4.transformMat4(rayDir, rayDir, transformation);\r\n        console.log(rayDir[0], rayDir[1],rayDir[2], rayDir[3]);\r\n        //console.log(rayPos[0], rayPos[1],rayPos[2], rayPos[3]);\r\n        let scale : vec3 = vec3.create();\r\n        mat4.getScaling(scale, transformation);\r\n        //console.log(scale);\r\n        let v : vec4 = rayDir;\r\n        let s : vec4 = rayPos;\r\n        let v_x : number = v[0];\r\n        let v_y : number = v[1];\r\n        let v_z : number = v[2];\r\n        let s_x : number = s[0];\r\n        let s_y : number = s[1];\r\n        let s_z : number = s[2];\r\n\r\n        let txMin : number = Infinity;\r\n        let txMax : number = Infinity;\r\n        let tyMin : number = Infinity;\r\n        let tyMax : number = Infinity;\r\n        let tzMin : number = Infinity;\r\n        let tzMax : number = Infinity;\r\n\r\n        txMin   = (- 0.5 - s_x) / v_x;\r\n        txMax   = (0.5 - s_x) / v_x;\r\n        tyMin   = (- 0.5 - s_y) / v_y;\r\n        tyMax   = (0.5 - s_y) / v_y;\r\n        tzMin   = (- 0.5 - s_z) / v_z;\r\n        tzMax   = (0.5 - s_z) / v_z;\r\n\r\n        \r\n\r\n        let time : number[] = [txMin, txMax, tyMin, tyMax, tzMin, tzMax];\r\n        \r\n        let currentShortestTime = Infinity;\r\n        for(let i : number = 0; i < 6; i ++) {\r\n            if(time[i] > 0) {\r\n                if(time[i] < currentShortestTime) {\r\n                    currentShortestTime = time[i];\r\n                }\r\n            }\r\n            else {\r\n                time[i] = Infinity;\r\n            }\r\n        }\r\n        //console.log(time);\r\n\r\n        let recordShortestTime : number = hitRecord.getTime();\r\n        if(currentShortestTime < recordShortestTime) {\r\n            //Update everything.\r\n            hitRecord.setTime(currentShortestTime);\r\n            let intersection : vec4 = vec4.create();\r\n            let distance : vec4 = vec4.create();\r\n            vec4.scale(distance, rayDir, currentShortestTime);\r\n            vec4.add(intersection, rayPos, distance);\r\n            hitRecord.setIntersectionPoint(intersection);\r\n            //console.log(translation[0],translation[1],translation[2]);\r\n            //console.log(currentShortestTime, intersection[0],intersection[1],intersection[2])\r\n           //console.log(hitRecord.getTime());\r\n           //console.log(rayPos[0],rayPos[1],rayPos[2]);\r\n        }\r\n    }\r\n\r\n\r\n}","import { vec3 } from \"gl-matrix\"\r\n\r\n/**\r\n * This class represents material. Material is represented using (a) ambient (b)\r\n * diffuse (c) specular (d) emission (for materials that emit light themselves)\r\n * It also has coefficients for shininess, absorption, reflection (for\r\n * reflective material), transparency (for transparent material) and refractive\r\n * index (for transparent material). For the latter ones, the user must make\r\n * sure that absorption + reflection + transparency = 1\r\n */\r\nexport class Material {\r\n    private emission: vec3;\r\n    private ambient: vec3;\r\n    private diffuse: vec3;\r\n    private specular: vec3;\r\n    private shininess: number;\r\n    private absorption: number;\r\n    private reflection: number;\r\n    private transparency: number;\r\n    private refractive_index: number;\r\n\r\n    constructor() {\r\n        this.emission = vec3.create();\r\n        this.ambient = vec3.create();\r\n        this.diffuse = vec3.create();\r\n        this.specular = vec3.create();\r\n        this.init();\r\n    }\r\n\r\n    public Material(mat: Material) {\r\n        this.emission = new vec3(mat.getEmission());\r\n        this.ambient = new vec3(mat.getAmbient());\r\n        this.diffuse = new vec3(mat.getDiffuse());\r\n        this.specular = new vec3(mat.getSpecular());\r\n        this.setShininess(mat.getShininess());\r\n        this.setAbsorption(mat.getAbsorption());\r\n        this.setReflection(mat.getReflection());\r\n        this.setTransparency(mat.getTransparency());\r\n        this.setRefractiveIndex(mat.getRefractiveIndex());\r\n    }\r\n\r\n\r\n    public init(): void {\r\n        this.setEmission([0.0, 0.0, 0.0]);\r\n        this.setAmbient([0.0, 0.0, 0.0]);\r\n        this.setDiffuse([0.0, 0.0, 0.0]);\r\n        this.setSpecular([0.0, 0.0, 0.0]);\r\n        this.setShininess(0.0);\r\n        this.setAbsorption(1);\r\n        this.setReflection(0);\r\n        this.setTransparency(0);\r\n    }\r\n\r\n    public setEmission(emission: vec3 | number[]): void {\r\n        this.emission = vec3.fromValues(emission[0], emission[1], emission[2]);\r\n    }\r\n\r\n\r\n    public setAmbient(ambient: vec3 | number[]): void {\r\n        this.ambient = vec3.fromValues(ambient[0], ambient[1], ambient[2]);\r\n    }\r\n\r\n\r\n    public setDiffuse(diffuse: vec3 | number[]): void {\r\n        this.diffuse = vec3.fromValues(diffuse[0], diffuse[1], diffuse[2]);\r\n    }\r\n\r\n    public setSpecular(specular: vec3 | number[]): void {\r\n        this.specular = vec3.fromValues(specular[0], specular[1], specular[2]);\r\n    }\r\n\r\n    public setShininess(r: number): void {\r\n        this.shininess = r;\r\n    }\r\n\r\n    public setAbsorption(a: number): void {\r\n        this.absorption = a;\r\n    }\r\n\r\n    public setReflection(r: number): void {\r\n        this.reflection = r;\r\n    }\r\n\r\n    public setTransparency(t: number): void {\r\n        this.transparency = t;\r\n        this.ambient[3] = this.diffuse[3] = this.specular[3] = this.emission[3] = 1 - t;\r\n    }\r\n\r\n    public setRefractiveIndex(r: number): void {\r\n        this.refractive_index = r;\r\n    }\r\n\r\n    public getEmission(): vec3 {\r\n        return vec3.fromValues(this.emission[0], this.emission[1], this.emission[2]);\r\n    }\r\n\r\n    public getAmbient(): vec3 {\r\n        return vec3.fromValues(this.ambient[0], this.ambient[1], this.ambient[2]);\r\n    }\r\n\r\n    public getDiffuse(): vec3 {\r\n        return vec3.fromValues(this.diffuse[0], this.diffuse[1], this.diffuse[2]);\r\n    }\r\n\r\n    public getSpecular(): vec3 {\r\n        return vec3.fromValues(this.specular[0], this.specular[1], this.specular[2]);\r\n    }\r\n\r\n    public getShininess(): number {\r\n        return this.shininess;\r\n    }\r\n\r\n    public getAbsorption(): number {\r\n        return this.absorption;\r\n    }\r\n\r\n    public getReflection(): number {\r\n        return this.reflection;\r\n    }\r\n\r\n    public getTransparency(): number {\r\n        return this.transparency;\r\n    }\r\n\r\n    public getRefractiveIndex(): number {\r\n        return this.refractive_index;\r\n    }\r\n}\r\n","\r\nimport { vec3 } from \"gl-matrix\";\r\nexport class Ray {\r\n    protected startPoint : vec3 = vec3.create();\r\n    protected direction : vec3 = vec3.create();\r\n\r\n    public constructor(startPoint : vec3, direction : vec3) {\r\n        this.startPoint = startPoint;\r\n        this.direction = direction;\r\n    }\r\n\r\n    public getStartPoint() : vec3 {\r\n        return this.startPoint;\r\n    }\r\n\r\n    public getDirection() : vec3 {\r\n        return this.direction;\r\n    }\r\n\r\n}","import { View } from \"View\"\r\nimport * as OBJ from \"webgl-obj-loader\";\r\nimport { vec2,mat4 } from \"gl-matrix\";\r\nimport { Material } from \"%COMMON/Material\";\r\nimport {RTView} from \"./RTView\";\r\nimport {vec3} from \"gl-matrix\";\r\n\r\nexport interface Features {\r\n    /*mousePress(x: number, y: number): void;\r\n    mouseRelease(x: number, y: number): void;\r\n    mouseDragged(x: number, y: number): void;\r\n    */\r\n}\r\nexport class Controller implements Features {\r\n    private view: View;\r\n    private mousePos: vec2;\r\n    private dragged: boolean;\r\n\r\n    constructor(view: View) {\r\n        this.view = view;\r\n        this.view.setFeatures(this);\r\n    }\r\n\r\n    public go(): void {\r\n        this.view.initScenegraph()\r\n            .then(() => {\r\n                let numLights: number = this.view.getNumLights();\r\n\r\n                this.view.initShaders(this.getPhongVShader(), this.getPhongFShader(numLights));\r\n                this.view.initRenderer();\r\n                this.view.draw();\r\n            });\r\n    }\r\n/*\r\n    public mousePress(x: number, y: number): void {\r\n        this.mousePos = vec2.fromValues(x, y);\r\n        this.dragged = true;\r\n    }\r\n    public mouseRelease(x: number, y: number): void {\r\n        let delta: vec2 = vec2.fromValues(x - this.mousePos[0], y - this.mousePos[1]);\r\n        this.view.trackball(delta);\r\n        this.mousePos = vec2.fromValues(x, y);\r\n        this.dragged = false;\r\n    }\r\n    public mouseDragged(x: number, y: number): void {\r\n        if (this.dragged) {\r\n            let delta: vec2 = vec2.fromValues(x - this.mousePos[0], y - this.mousePos[1]);\r\n            this.view.trackball(delta);\r\n            this.mousePos = vec2.fromValues(x, y);\r\n        }\r\n    }\r\n    */\r\n\r\n    public getPhongVShader(): string {\r\n        return `\r\n        attribute vec4 vPosition;\r\n        attribute vec4 vNormal;\r\n        \r\n        uniform mat4 projection;\r\n        uniform mat4 modelview;\r\n        uniform mat4 normalmatrix;\r\n        varying vec3 fNormal;\r\n        varying vec4 fPosition;\r\n        \r\n        void main()\r\n        {\r\n            vec3 lightVec,viewVec,reflectVec;\r\n            vec3 normalView;\r\n            vec3 ambient,diffuse,specular;\r\n        \r\n            fPosition = modelview * vPosition;\r\n            gl_Position = projection * fPosition;\r\n        \r\n        \r\n            vec4 tNormal = normalmatrix * vNormal;\r\n            fNormal = normalize(tNormal.xyz);\r\n        }\r\n        \r\n    `;\r\n    }\r\n\r\n    public getPhongFShader(numLights: number): string {\r\n        return `precision mediump float;\r\n\r\n        struct MaterialProperties\r\n        {\r\n            vec3 ambient;\r\n            vec3 diffuse;\r\n            vec3 specular;\r\n            float shininess;\r\n        };\r\n        \r\n        struct LightProperties\r\n        {\r\n            vec3 ambient;\r\n            vec3 diffuse;\r\n            vec3 specular;\r\n            vec4 position;\r\n            vec4 spotDirection;\r\n            float spotCutoff;\r\n        };\r\n        \r\n        \r\n        varying vec3 fNormal;\r\n        varying vec4 fPosition;\r\n\r\n        \r\n        \r\n        \r\n        uniform MaterialProperties material;\r\n        uniform LightProperties light[`+ numLights + `];\r\n        \r\n        \r\n        void main()\r\n        {\r\n            vec3 lightVec,viewVec,reflectVec;\r\n            vec3 normalView;\r\n            vec3 ambient,diffuse,specular;\r\n            float nDotL,rDotV;\r\n            vec4 result;\r\n        \r\n        \r\n            result = vec4(0,0,0,1);\r\n        `\r\n            + `for (int i=0;i<` + numLights + `;i++)\r\n            {\r\n                if (light[i].position.w!=0.0)\r\n                    lightVec = normalize(light[i].position.xyz - fPosition.xyz);\r\n                else\r\n                    lightVec = normalize(-light[i].position.xyz);\r\n        \r\n                vec3 tNormal = fNormal;\r\n                normalView = normalize(tNormal.xyz);\r\n                nDotL = dot(normalView,lightVec);\r\n        \r\n                viewVec = -fPosition.xyz;\r\n                viewVec = normalize(viewVec);\r\n        \r\n                reflectVec = reflect(-lightVec,normalView);\r\n                reflectVec = normalize(reflectVec);\r\n        \r\n                rDotV = max(dot(reflectVec,viewVec),0.0);\r\n        \r\n                vec3 spotDirection = normalize(light[i].spotDirection.xyz);\r\n                \r\n                if (dot(spotDirection,-lightVec)>light[i].spotCutoff) {\r\n                    ambient = material.ambient * light[i].ambient;\r\n                    diffuse = material.diffuse * light[i].diffuse * max(nDotL,0.0);\r\n                    if (nDotL>0.0)\r\n                        specular = material.specular * light[i].specular * pow(rDotV,material.shininess);\r\n                    else\r\n                        specular = vec3(0,0,0);\r\n                    result = result + vec4(ambient+diffuse+specular,1.0);  \r\n                }  \r\n            }\r\n            gl_FragColor = result;\r\n        }\r\n        \r\n    `;\r\n    }\r\n\r\n\r\n\r\n}","import { vec3 } from \"gl-matrix\";\r\n\r\nexport class RTView {\r\n    private canvas: HTMLCanvasElement;\r\n    constructor() {\r\n        this.canvas = <HTMLCanvasElement>document.querySelector(\"#raytraceCanvas\");\r\n        if (!this.canvas) {\r\n            console.log(\"Failed to retrieve the <canvas> element\");\r\n            return;\r\n        }\r\n        //button clicks\r\n        let button: HTMLButtonElement = <HTMLButtonElement>document.querySelector(\"#savebutton\");\r\n        button.addEventListener(\"click\", ev => this.saveCanvas());\r\n    }\r\n\r\n    private saveCanvas(): void {\r\n        let link = document.createElement('a');\r\n        link.href = this.canvas.toDataURL('image/png');\r\n        link.download = \"result.png\";\r\n        link.click();\r\n    }\r\n\r\n    public fillCanvas(colors : vec3[], w : number, h : number): void {\r\n        let width: number = Number(this.canvas.getAttribute(\"width\"));\r\n        let height: number = Number(this.canvas.getAttribute(\"height\"));\r\n        //console.log(w,h);\r\n        let imageData: ImageData = this.canvas.getContext('2d').createImageData(w, h);\r\n\r\n        for (let i: number = 0; i < h; i++) {\r\n            for (let j: number = 0; j < w; j++) {\r\n                 \r\n                imageData.data[4 * (i * w + j)] = colors[i * w + j][0] * 255;//Math.random() * 255;\r\n                imageData.data[4 * (i * w + j) + 1] = colors[i * w + j][1] * 255;//Math.random() * 255;\r\n                imageData.data[4 * (i * w + j) + 2] = colors[i * w + j][2] * 255;//Math.random() * 255;\r\n                imageData.data[4 * (i * w + j) + 3] = 255;\r\n                \r\n            }\r\n        }\r\n        this.canvas.getContext('2d').putImageData(imageData, 0, 0);\r\n\r\n        //let context: CanvasRenderingContext2D = this.canvas.getContext('2d')\r\n        //context.fillStyle = 'red';\r\n        //context.fillRect(100, 100, 200, 100);\r\n    }\r\n}"],"sourceRoot":""}